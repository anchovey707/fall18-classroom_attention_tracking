<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tobii.Research</name>
    </assembly>
    <members>
        <member name="T:Tobii.Research.CalibrationData">
            <summary>
            Stores calibration data.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationData"/> class
            </summary>
            <param name="data">The calibration data.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationData.Data">
            <summary>
            Gets or sets the calibration data.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationData.op_Equality(Tobii.Research.CalibrationData,Tobii.Research.CalibrationData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationData"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationData.op_Inequality(Tobii.Research.CalibrationData,Tobii.Research.CalibrationData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationData"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationData.Equals(Tobii.Research.CalibrationData)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.CalibrationData"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationData.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.EyeData"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationData.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.CalibrationModeEnteredEventArgs">
            <summary>
            Provides data for the CalibrationModeEntered event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.CalibrationModeEnteredEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationModeEnteredEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationModeEnteredEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.CalibrationModeLeftEventArgs">
            <summary>
            Provides data for the CalibrationModeLeft event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.CalibrationModeLeftEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationModeLeftEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationModeLeftEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.CalibrationPoint">
            <summary>
            Represents the calibration point and its collected calibration samples.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.#ctor(Tobii.Research.NormalizedPoint2D,Tobii.Research.CalibrationSampleCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationPoint"/> class
            </summary>
            <param name="positionOnDisplayArea">The position of the calibration point on the active display area.</param>
            <param name="calibrationSamples">The collection of collected samples for the calibration.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationPoint.PositionOnDisplayArea">
            <summary>
            Gets the position of the calibration point on the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.CalibrationPoint.CalibrationSamples">
            <summary>
            Gets a collection of collected samples for the calibration.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.op_Equality(Tobii.Research.CalibrationPoint,Tobii.Research.CalibrationPoint)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationPoint"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.op_Inequality(Tobii.Research.CalibrationPoint,Tobii.Research.CalibrationPoint)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationPoint"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.Equals(Tobii.Research.CalibrationPoint)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.CalibrationPoint"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.CalibrationPoint"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationPoint.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.CalibrationPointCollection">
            <summary>
            Represents a read-only collection of CalibrationPoint objects.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationPointCollection.#ctor(System.Collections.Generic.IList{Tobii.Research.CalibrationPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationPointCollection" /> class
            from a generic list of calibration points.
            </summary>
            <param name="calibrationPoints">A list of calibration points.</param>
        </member>
        <member name="T:Tobii.Research.CalibrationResult">
            <summary>
            Represents the result of the calculated calibration.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationResult.#ctor(Tobii.Research.CalibrationPointCollection,Tobii.Research.CalibrationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationResult"/> class
            </summary>
            <param name="calibrationPoints">The list of calibration points and their collected calibration samples.</param>
            <param name="status">The status of the calculation.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationResult.CalibrationPoints">
            <summary>
            Gets the list of calibration points and their collected calibration samples.
            </summary>
        </member>
        <member name="P:Tobii.Research.CalibrationResult.Status">
            <summary>
            Gets the status of the calculation.
            </summary>
        </member>
        <member name="T:Tobii.Research.CalibrationStatus">
            <summary>
            Defines the overall status of a calibration process
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationStatus.Failure">
            <summary>
            Indicates that the calibration process failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationStatus.Success">
            <summary>
            Indicates that the calibration process succeeded for both eyes.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationStatus.SuccessLeftEye">
            <summary>
            Indicates that the calibration process succeeded for the left eye.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationStatus.SuccessRightEye">
            <summary>
            Indicates that the calibration process succeeded for the right eye.
            </summary>
        </member>
        <member name="T:Tobii.Research.Capabilities">
            <summary>
            Defines the capabilities.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.None">
            <summary>
            No capabilities set.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.CanSetDisplayArea">
            <summary>
            Indicates that the device can have the display area set.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.HasExternalSignal">
            <summary>
            Indicates that the device can deliver an external signal stream.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.HasEyeImages">
            <summary>
            Indicates that the device can deliver an eye image stream.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.HasGazeData">
            <summary>
            Indicates that the device can deliver a gaze data stream. Standard for all screen based eye trackers.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.HasHMDGazeData">
            <summary>
            Indicates that the device can deliver a HMD gaze data stream.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.CanDoScreenBasedCalibration">
            <summary>
            Indicates that screen based calibration can be performed on the device.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.CanDoHMDBasedCalibration">
            <summary>
            Indicates that HMD based calibration can be performed on the device.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.HasHMDLensConfig">
            <summary>
            Indicates that it's possible to get and set the HMD lens configuration on the device.
            </summary>
        </member>
        <member name="F:Tobii.Research.Capabilities.CanDoMonocularCalibration">
            <summary>
            Indicates that monocular calibration can be performed on the device.
            </summary>
        </member>
        <member name="T:Tobii.Research.ConnectionLostEventArgs">
            <summary>
            Provides data for the ConnectionLost event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.ConnectionLostEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionLostEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.ConnectionLostEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.ConnectionRestoredEventArgs">
            <summary>
            Provides data for the ConnectionRestored event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.ConnectionRestoredEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionRestoredEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.ConnectionRestoredEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.DisplayArea">
            <summary>
            Represents the three coordinates in space corresponding to the top left, bottom left, and
            top right corners of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.DisplayArea.topLeft">
            <summary>
            Local representation of the top left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.DisplayArea.bottomLeft">
            <summary>
            Local representation of the bottom left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.DisplayArea.topRight">
            <summary>
            Local representation of the top right corner of the active display area.
            </summary>
        </member>
        <member name="M:Tobii.Research.DisplayArea.#ctor(Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayArea" /> class given top left, bottom left, and top right coordinates. 
            </summary>
            <param name="topLeft">The top left coordinate</param>
            <param name="bottomLeft">The bottom left coordinate</param>
            <param name="topRight">The top right coordinate</param>
        </member>
        <member name="M:Tobii.Research.DisplayArea.#ctor(Tobii.Research.TobiiProInterop.InteropDisplayArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayArea" /> class given an InteropDisplayArea.
            </summary>
            <param name="interopDisplayArea">The display area from core.</param>
        </member>
        <member name="P:Tobii.Research.DisplayArea.BottomLeft">
            <summary>
            Gets or sets the bottom left corner of the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayArea.BottomRight">
            <summary>
            Gets the bottom right corner of the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayArea.Height">
            <summary>
            Gets the height in millimeters of the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayArea.TopLeft">
            <summary>
            Gets or sets the top left corner of the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayArea.TopRight">
            <summary>
            Gets or sets the top right corner of the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayArea.Width">
            <summary>
            Gets the width in millimeters of the active display area.
            </summary>
        </member>
        <member name="M:Tobii.Research.DisplayArea.op_Equality(Tobii.Research.DisplayArea,Tobii.Research.DisplayArea)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.DisplayArea"/> objects are equal.
            </summary>
            <param name="obj1">First DisplayArea.</param>
            <param name="obj2">Second DisplayArea.</param>
            <returns>True if the DisplayArea objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.DisplayArea.op_Inequality(Tobii.Research.DisplayArea,Tobii.Research.DisplayArea)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.DisplayArea"/> objects are not equal.
            </summary>
            <param name="obj1">First DisplayArea.</param>
            <param name="obj2">Second DisplayArea.</param>
            <returns>True if the DisplayArea objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.DisplayArea.Equals(Tobii.Research.DisplayArea)">
            <summary>
            Checks if this DisplayArea is equal to another <see cref="T:Tobii.Research.DisplayArea"/> .
            </summary>
            <param name="other">Other DisplayArea to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.DisplayArea.Equals(System.Object)">
            <summary>
            Checks if this DisplayArea is equal to another <see cref="T:Tobii.Research.DisplayArea"/> .
            </summary>
            <param name="obj">Other DisplayArea to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.DisplayArea.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Tobii.Research.DisplayArea.Calculate">
            <summary>
            Private method for calculating bottom right coordinates, height and width.
            </summary>
        </member>
        <member name="T:Tobii.Research.DisplayAreaEventArgs">
            <summary>
            Provides data for the DisplayAreaChanged event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.DisplayAreaEventArgs.#ctor(System.Int64,Tobii.Research.TobiiProInterop.InteropDisplayArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayAreaEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
            <param name="displayArea">The new display area that was changed to.</param>
        </member>
        <member name="P:Tobii.Research.DisplayAreaEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.DisplayAreaEventArgs.DisplayArea">
            <summary>
            Gets the new display area that was changed to.
            </summary>
        </member>
        <member name="T:Tobii.Research.EventErrorEventArgs">
            <summary>
            Provides data for the EventErrorOccurred event.
            </summary>
        </member>
        <member name="M:Tobii.Research.EventErrorEventArgs.#ctor(Tobii.Research.TobiiProInterop.InteropStreamErrorData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EventErrorEventArgs" /> class given data for all members.
            </summary>
            <param name="stream_error">Stream error data from core module.</param>
        </member>
        <member name="P:Tobii.Research.EventErrorEventArgs.ErrorType">
            <summary>
            Gets the log source.
            </summary>
        </member>
        <member name="P:Tobii.Research.EventErrorEventArgs.Source">
            <summary>
            Gets the log level.
            </summary>
        </member>
        <member name="P:Tobii.Research.EventErrorEventArgs.Message">
            <summary>
            Gets the log message.
            </summary>
        </member>
        <member name="P:Tobii.Research.EventErrorEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.EventErrorSource">
            <summary>
            Define error sources
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.User">
            <summary>
            User callback failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.EventPump">
            <summary>
            Error when pumping event.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.SubscriptionGazeData">
            <summary>
            Error when subscribing to event for gaze data.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.SubscriptionExternalSignal">
            <summary>
            Error when subscribing to event for external signal.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.SubscriptionTimeSynchronizationData">
            <summary>
            Error when subscribing to event for time synchronization data.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.SubscriptionEyeImage">
            <summary>
            Error when subscribing to event for eye images.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorSource.SubscriptionNotification">
            <summary>
            Error when subscribing to notification event.
            </summary>
        </member>
        <member name="T:Tobii.Research.EventErrorType">
            <summary>
            Define error types
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorType.ConnectionLost">
            <summary>
            The connection to the eye tracker was lost.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorType.InsufficientLicense">
            <summary>
            The license is insufficient for subscribing to the event.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorType.NotSupported">
            <summary>
            The event isn't supported by the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorType.InternalError">
            <summary>
            An internal error occurred.
            </summary>
        </member>
        <member name="F:Tobii.Research.EventErrorType.UserError">
            <summary>
            The user threw an exception in the callback.
            </summary>
        </member>
        <member name="T:Tobii.Research.DisplayAreaNotValidException">
            <summary>
            Is thrown if trying to enter calibration mode with an invalid display area.
            </summary>
        </member>
        <member name="M:Tobii.Research.DisplayAreaNotValidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayAreaNotValidException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.DisplayAreaNotValidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayAreaNotValidException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.DisplayAreaNotValidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayAreaNotValidException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.DisplayAreaNotValidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.DisplayAreaNotValidException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.IncompatibleFirmwarePackageException">
            <summary>
            Is thrown when the eye tracker device does not match the firmware.
            </summary>
        </member>
        <member name="M:Tobii.Research.IncompatibleFirmwarePackageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.IncompatibleFirmwarePackageException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.IncompatibleFirmwarePackageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.IncompatibleFirmwarePackageException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.IncompatibleFirmwarePackageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.IncompatibleFirmwarePackageException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.IncompatibleFirmwarePackageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.IncompatibleFirmwarePackageException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.FirmwareUpgradeNotSupportedException">
            <summary>
            Is thrown when firmware upgrade is not supported by the eye tracker.
            </summary>
        </member>
        <member name="M:Tobii.Research.FirmwareUpgradeNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FirmwareUpgradeNotSupportedException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.FirmwareUpgradeNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FirmwareUpgradeNotSupportedException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.FirmwareUpgradeNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FirmwareUpgradeNotSupportedException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.FirmwareUpgradeNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FirmwareUpgradeNotSupportedException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.SavedLicenseFailedToApplyException">
            <summary>
            Is thrown when the license saved on the device failed to apply.
            </summary>
        </member>
        <member name="M:Tobii.Research.SavedLicenseFailedToApplyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.SavedLicenseFailedToApplyException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.SavedLicenseFailedToApplyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.SavedLicenseFailedToApplyException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.SavedLicenseFailedToApplyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.SavedLicenseFailedToApplyException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.SavedLicenseFailedToApplyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.SavedLicenseFailedToApplyException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.UnknownFirmwareVersionException">
            <summary>
            Is thrown when the firmware version is unknown.
            </summary>
        </member>
        <member name="M:Tobii.Research.UnknownFirmwareVersionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.UnknownFirmwareVersionException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.UnknownFirmwareVersionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.UnknownFirmwareVersionException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.UnknownFirmwareVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.UnknownFirmwareVersionException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.UnknownFirmwareVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.UnknownFirmwareVersionException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.ExternalSignalChangeType">
            <summary>
            Defines the type of external signal.
            </summary>
        </member>
        <member name="F:Tobii.Research.ExternalSignalChangeType.ValueChanged">
            <summary>
            Indicates that the value sent to the eye tracker has changed.
            </summary>
        </member>
        <member name="F:Tobii.Research.ExternalSignalChangeType.InitialValue">
            <summary>
            Indicates that the value is the initial value, and is received when starting a subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.ExternalSignalChangeType.ConnectionRestored">
            <summary>
            Indicates that there has been a connection lost and now it is restored and the value is the current value.
            </summary>
        </member>
        <member name="T:Tobii.Research.EyeImageEventArgs">
            <summary>
            Provides data for the EyeImageReceived event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.EyeImageEventArgs.#ctor(Tobii.Research.EyeImageType,System.Int32,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeImageEventArgs" /> class given data for all members.
            </summary>
            <param name="imageType">The type of eye image</param>
            <param name="cameraId">Which camera generated the image.</param>
            <param name="imageStream">The bitmap data sent by the eye tracker, that can be converted to several image formats.</param>
            <param name="deviceTimeStamp">The eye tracker time stamp.</param>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.EyeImageEventArgs.ImageType">
            <summary>
            Gets the type of eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageEventArgs.CameraId">
            <summary>
            Gets which camera generated the image.
            </summary>        
        </member>
        <member name="P:Tobii.Research.EyeImageEventArgs.ImageStream">
            <summary>
            Gets the bitmap data sent by the eye tracker, that can be converted to several image formats.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the eye tracker's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.EyeImageType">
            <summary>
            Defines the type of eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeImageType.Full">
            <summary>
            Indicates that the eye tracker could not identify the eyes, and the image is the full image.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeImageType.Cropped">
            <summary>
            Indicates that the image is cropped and shows the eyes.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeImageType.Unknown">
            <summary>
            Indicates an unknown image type.
            </summary>
        </member>
        <member name="T:Tobii.Research.FailedLicense">
            <summary>
            Represents a failed license.
            </summary>
        </member>
        <member name="M:Tobii.Research.FailedLicense.#ctor(Tobii.Research.LicenseKey,Tobii.Research.LicenseValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FailedLicense" /> class
            from a license key.
            </summary>
            <param name="licenseKey">A license key.</param>
            <param name="validationResult">the result of the license validation.</param>
        </member>
        <member name="P:Tobii.Research.FailedLicense.LicenseKey">
            <summary>
            Gets the license key.
            </summary>
        </member>
        <member name="P:Tobii.Research.FailedLicense.ValidationResult">
            <summary>
            Gets the result of the license validation.
            </summary>
        </member>
        <member name="M:Tobii.Research.FailedLicense.op_Equality(Tobii.Research.FailedLicense,Tobii.Research.FailedLicense)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.FailedLicense"/> objects are equal.
            </summary>
            <param name="obj1">First failed license.</param>
            <param name="obj2">Second failed license key</param>
            <returns>True if the failed licenses are equal.</returns>
        </member>
        <member name="M:Tobii.Research.FailedLicense.op_Inequality(Tobii.Research.FailedLicense,Tobii.Research.FailedLicense)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.FailedLicense"/> objects are not equal.
            </summary>
            <param name="obj1">First failed license.</param>
            <param name="obj2">Second failed license key</param>
            <returns>True if the failed licenses are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.FailedLicense.Equals(Tobii.Research.FailedLicense)">
            <summary>
            Checks if this failed license is equal to another <see cref="T:Tobii.Research.FailedLicense"/> .
            </summary>
            <param name="other">Other failed license to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.FailedLicense.Equals(System.Object)">
            <summary>
            Checks if this failed license is equal to another <see cref="T:Tobii.Research.FailedLicense"/> .
            </summary>
            <param name="obj">Other failed license to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.FailedLicense.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.FailedLicenseCollection">
            <summary>
            Represents a read-only collection of FailedLicense objects.
            </summary>
        </member>
        <member name="M:Tobii.Research.FailedLicenseCollection.#ctor(System.Collections.Generic.IList{Tobii.Research.FailedLicense})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FailedLicenseCollection" /> class
            from a generic list of failed licenses.
            </summary>
            <param name="failedLicenses">A list of failed licenses.</param>
        </member>
        <member name="T:Tobii.Research.FirmwarePackageCompatibility">
            <summary>
            Firmware package compatibility.
            </summary>
        </member>
        <member name="M:Tobii.Research.FirmwarePackageCompatibility.#ctor(System.Boolean,System.String,System.String,Tobii.Research.VersionComparison)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FirmwarePackageCompatibility" /> class.
            </summary>
            <param name="matchModel">True if device model and package model match. False if they don't.</param>
            <param name="firmvareVersionOnDevice">The version of the firmware on the device.</param>
            <param name="firmwareVersionInPackage">The version of the firmware in the package.</param>
            <param name="versionComparison">Result of version comparison.</param>
        </member>
        <member name="P:Tobii.Research.FirmwarePackageCompatibility.MatchModel">
            <summary>
            Gets a value indicating whether the device model and package model match.
            </summary>
        </member>
        <member name="P:Tobii.Research.FirmwarePackageCompatibility.FirmwareVersionOnDevice">
            <summary>
            Gets the version of the firmware on the device.
            </summary>
        </member>
        <member name="P:Tobii.Research.FirmwarePackageCompatibility.FirmwareVersionInPackage">
            <summary>
            Gets the version of the firmware in the package.
            </summary>
        </member>
        <member name="P:Tobii.Research.FirmwarePackageCompatibility.VersionComparison">
            <summary>
            Gets the result of version comparison.
            </summary>
        </member>
        <member name="M:Tobii.Research.FirmwarePackageCompatibility.FormatVersionString(System.String)">
            <summary>
            Removes any trailing hash or other non version related string from the end of a version string.
            </summary>
            <param name="versionString">Unformatted string.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="T:Tobii.Research.GazeOutputFrequencyEventArgs">
            <summary>
            Provides data for the GazeOutputFrequencyChanged event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.GazeOutputFrequencyEventArgs.#ctor(System.Int64,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.GazeOutputFrequencyEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
            <param name="gazeOutputFrequency">The new gaze output frequency that was changed to.</param>
        </member>
        <member name="P:Tobii.Research.GazeOutputFrequencyEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeOutputFrequencyEventArgs.GazeOutputFrequency">
            <summary>
            Gets the new gaze output frequency that was changed to.
            </summary>
        </member>
        <member name="T:Tobii.Research.HMDBasedCalibration">
            <summary>
             Provides methods and properties for managing calibrations for HMD based eye trackers.
            </summary>
        </member>
        <member name="F:Tobii.Research.HMDBasedCalibration.isInCalibrationMode">
            <summary>
            Gets the calibration mode status.
            </summary>
        </member>
        <member name="F:Tobii.Research.HMDBasedCalibration.disposed">
            <summary>
            Track whether Dispose() has been called.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.#ctor(Tobii.Research.IEyeTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDBasedCalibration"/> class
            </summary>
            <param name="eyeTracker">The eye tracker to calibrate.</param>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tobii.Research.HMDBasedCalibration" /> class.
            This destructor will run only if the Dispose() method
            does not get called. Is called automatically prior to
            object destruction.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDBasedCalibration.EyeTrackerAddress">
            <summary>
            Gets address to eye tracker. Used in error reporting.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDBasedCalibration.NativeEyeTracker">
            <summary>
            Gets the eye tracker to calibrate.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.CollectData(Tobii.Research.Point3D)">
            <summary>
            Starts collecting data for a calibration point. The argument used is the point the 
            calibration user is assumed to be looking at and is given in the HMD coordinate system.
            </summary>
            <param name="positionInHMDCoordinates">Data for a calibration point.</param>
            <returns>The status of the calibration process.</returns>
            <CodeExample>HMDBasedCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.CollectDataAsync(Tobii.Research.Point3D)">
            <summary>
            Asynchronous version of the CollectData method. This is useful since this operation
            can take a while on some eye trackers. Starts collecting data for a calibration point.
            The argument used is the point the calibration user is assumed to be looking at and is
            given in the HMD Coordinate System.
            </summary>
            <param name="positionInHMDCoordinates">Data for a calibration point.</param>
            <returns>An asynchronous operation that can be awaited and will contain the status of the calibration process.</returns>
            <CodeExample>HMDBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.ComputeAndApply">
            <summary>
            Uses the collected data and tries to compute calibration parameters. If the calculation
            is successful, the result is applied to the eye tracker. If there is insufficient data
            to compute a new calibration or if the collected data is not good enough then
            calculation is failed and will not be applied.
            </summary>
            <returns>A CalibrationResult.</returns>
            <CodeExample>HMDBasedCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.ComputeAndApplyAsync">
            <summary>
            Asynchronous version of the ComputeAndApply method. Uses the collected data and tries
            to compute calibration parameters.If the calculation is successful, the result is
            applied to the eye tracker.If there is insufficient data to compute a new calibration
            or if the collected data is not good enough then calculation is failed and will not be
            applied.
            </summary>
            <returns>An asynchronous operation that will provide a CalibrationResult.</returns>
            <CodeExample>HMDBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.EnterCalibrationMode">
            <summary>
            Enters the calibration mode and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <remarks>
            <CodeExample>HMDBasedCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.EnterCalibrationModeAsync">
            <summary>
            Enters the calibration mode asynchronously and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>HMDBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.LeaveCalibrationMode">
            <summary>
            Leaves the calibration mode.
            </summary>
            <remarks>
            <CodeExample>HMDBasedCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.LeaveCalibrationModeAsync">
            <summary>
            Leaves the calibration mode asynchronously.
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>HMDBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.Dispose">
            <summary>
            Should be called when done with the Calibration object to release resources.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.Dispose(System.Boolean)">
            <summary> Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Set to true if the method is called from the user's code.</param>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.ThrowExceptionIfDisposed">
            <summary>
            Throws ObjectDisposedException if the calibration object is disposed.
            This method must be called from every method that make call to the core.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDBasedCalibration.LeaveCalibrationModeInternal">
            <summary>
            Leaves the calibration mode without checking if disposed.
            </summary>
        </member>
        <member name="T:Tobii.Research.HMDCalibrationResult">
            <summary>
            Represents the result of the calculated HMD calibration.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDCalibrationResult.#ctor(Tobii.Research.CalibrationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDCalibrationResult"/> class
            </summary>
            <param name="status">The status of the calculation.</param>
        </member>
        <member name="P:Tobii.Research.HMDCalibrationResult.Status">
            <summary>
            Gets the status of the calculation.
            </summary>
        </member>
        <member name="T:Tobii.Research.HMDEyeData">
            <summary>
            Provides properties for the eye data when gotten from an HMD based device.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.#ctor(Tobii.Research.HMDGazeDirection,Tobii.Research.PupilData,Tobii.Research.HMDGazeOrigin,Tobii.Research.HMDPupilPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDEyeData" /> class given data for all members.
            </summary>
            <param name="gazeDirection">The the gaze direction data.</param>
            <param name="pupil">The pupil data.</param>
            <param name="gazeOrigin">The gaze origin data.</param>
            <param name="pupilPosition">The pupil position in HMD track box.</param>
        </member>
        <member name="P:Tobii.Research.HMDEyeData.GazeDirection">
            <summary>
            Gets the gaze direction data.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDEyeData.Pupil">
            <summary>
            Gets the pupil data.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDEyeData.GazeOrigin">
            <summary>
            Gets the gaze origin data.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDEyeData.PupilPosition">
            <summary>
            Gets the pupil position in HMD track box.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.op_Equality(Tobii.Research.HMDEyeData,Tobii.Research.HMDEyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDEyeData"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.op_Inequality(Tobii.Research.HMDEyeData,Tobii.Research.HMDEyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDEyeData"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.Equals(Tobii.Research.HMDEyeData)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.HMDEyeData"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.HMDEyeData"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDEyeData.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.HMDGazeDataEventArgs">
            <summary>
            Provides data for the HMDGazeDataReceived event.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDGazeDataEventArgs.#ctor(Tobii.Research.TobiiProInterop.InteropHMDGazeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDGazeDataEventArgs" /> class given an InteropGazeData object.
            </summary>
            <param name="data">Data from core module.</param>
        </member>
        <member name="P:Tobii.Research.HMDGazeDataEventArgs.LeftEye">
            <summary>
            Gets the HMD gaze data for the left eye.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDGazeDataEventArgs.RightEye">
            <summary>
            Gets the HMD gaze data for the right eye.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDGazeDataEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the eye tracker's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDGazeDataEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.HMDGazeDirection">
            <summary>
            Provides properties for the HMD gaze direction.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.#ctor(Tobii.Research.NormalizedPoint3D,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDGazeDirection" /> class given data for all members.
            </summary>
            <param name="unitVector">The the 3D unit vector that describes the gaze direction.</param>
            <param name="validity">The validity of the gaze direction data.</param>
        </member>
        <member name="P:Tobii.Research.HMDGazeDirection.UnitVector">
            <summary>
            Gets the 3D unit vector that describes the gaze direction.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDGazeDirection.Validity">
            <summary>
            Gets the validity of the gaze direction data.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.op_Equality(Tobii.Research.HMDGazeDirection,Tobii.Research.HMDGazeDirection)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDGazeDirection"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.op_Inequality(Tobii.Research.HMDGazeDirection,Tobii.Research.HMDGazeDirection)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDGazeDirection"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.Equals(Tobii.Research.HMDGazeDirection)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.HMDGazeDirection"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.HMDGazeDirection"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeDirection.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.HMDGazeOrigin">
            <summary>
            Provides properties for the HMD gaze origin.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.#ctor(Tobii.Research.Point3D,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDGazeOrigin" /> class given data for all members.
            </summary>
            <param name="positionInHMDCoordinates">The the 3D coordinates that describes the gaze origin in (in mm).</param>
            <param name="validity">The validity of the HMD gaze origin data.</param>
        </member>
        <member name="P:Tobii.Research.HMDGazeOrigin.PositionInHMDCoordinates">
            <summary>
            Gets the 3D coordinates that describes the gaze origin in (in mm).
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDGazeOrigin.Validity">
            <summary>
            Gets the validity of the HMD gaze origin data.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.op_Equality(Tobii.Research.HMDGazeOrigin,Tobii.Research.HMDGazeOrigin)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDGazeOrigin"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.op_Inequality(Tobii.Research.HMDGazeOrigin,Tobii.Research.HMDGazeOrigin)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDGazeOrigin"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.Equals(Tobii.Research.HMDGazeOrigin)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.HMDGazeOrigin"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.HMDGazeOrigin"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDGazeOrigin.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.HMDLensConfiguration">
            <summary>
            Provides properties for the lens configuration for a HMD device.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.#ctor(Tobii.Research.Point3D,Tobii.Research.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDLensConfiguration" /> class given data for all members.
            </summary>
            <param name="left">The point in HMD coordinate system that defines the position of the left lens (in millimeters).</param>
            <param name="right">The point in HMD coordinate system that defines the position of the right lens (in millimeters).</param>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.#ctor(Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDLensConfiguration" /> class given a InteropHMDLensConfiguration.
            </summary>
            <param name="interopHMDLensConfiguration">The interop HMD lens configuration to copy.</param>
        </member>
        <member name="P:Tobii.Research.HMDLensConfiguration.Left">
            <summary>
            Gets the point in HMD coordinate system that defines the position of the left lens (in millimeters).
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDLensConfiguration.Right">
            <summary>
            Gets the point in HMD coordinate system that defines the position of the right lens (in millimeters).
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.op_Equality(Tobii.Research.HMDLensConfiguration,Tobii.Research.HMDLensConfiguration)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDLensConfiguration"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.op_Inequality(Tobii.Research.HMDLensConfiguration,Tobii.Research.HMDLensConfiguration)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDLensConfiguration"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.Equals(Tobii.Research.HMDLensConfiguration)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.HMDLensConfiguration"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.HMDLensConfiguration"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDLensConfiguration.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.HMDPupilPosition">
            <summary>
            Provides properties for the HMD pupil position.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.#ctor(Tobii.Research.NormalizedPoint2D,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.HMDPupilPosition" /> class given data for all members.
            </summary>
            <param name="positionInTrackingArea">The 2D coordinates that describes the pupil's position in the HMD's tracking area.</param>
            <param name="validity">The validity of the pupil position data.</param>
        </member>
        <member name="P:Tobii.Research.HMDPupilPosition.PositionInTrackingArea">
            <summary>
            Gets the (normalizes) 2D coordinates that describes the pupil's position in the HMD's tracking area.
            </summary>
        </member>
        <member name="P:Tobii.Research.HMDPupilPosition.Validity">
            <summary>
            Gets the validity of the pupil position data.
            </summary>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.op_Equality(Tobii.Research.HMDPupilPosition,Tobii.Research.HMDPupilPosition)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDPupilPosition"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.op_Inequality(Tobii.Research.HMDPupilPosition,Tobii.Research.HMDPupilPosition)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.HMDPupilPosition"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.Equals(Tobii.Research.HMDPupilPosition)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.HMDPupilPosition"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.HMDPupilPosition"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.HMDPupilPosition.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.LicenseKey">
            <summary>
            Represents the eye tracker license key
            </summary>
        </member>
        <member name="M:Tobii.Research.LicenseKey.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.LicenseKey" /> class
            from a byte array which is the license.
            </summary>
            <param name="key">The byte array that is the actual license key.</param>
        </member>
        <member name="P:Tobii.Research.LicenseKey.Key">
            <summary>
            Gets the actual license key.
            </summary>
        </member>
        <member name="M:Tobii.Research.LicenseKey.op_Equality(Tobii.Research.LicenseKey,Tobii.Research.LicenseKey)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.LicenseKey"/> objects are equal.
            </summary>
            <param name="obj1">First license key.</param>
            <param name="obj2">Second license key</param>
            <returns>True if the license keys are equal.</returns>
        </member>
        <member name="M:Tobii.Research.LicenseKey.op_Inequality(Tobii.Research.LicenseKey,Tobii.Research.LicenseKey)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.LicenseKey"/> objects are not equal.
            </summary>
            <param name="obj1">First license key.</param>
            <param name="obj2">Second license key</param>
            <returns>True if the license keys are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.LicenseKey.Equals(Tobii.Research.LicenseKey)">
            <summary>
            Checks if this license key is equal to another <see cref="T:Tobii.Research.LicenseKey"/> .
            </summary>
            <param name="other">Other license key to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.LicenseKey.Equals(System.Object)">
            <summary>
            Checks if this license key is equal to another <see cref="T:Tobii.Research.LicenseKey"/> .
            </summary>
            <param name="obj">Other license key to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.LicenseKey.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.LicenseCollection">
            <summary>
            Represents a collection of LicenseKey objects.
            </summary>
        </member>
        <member name="M:Tobii.Research.LicenseCollection.#ctor(System.Collections.Generic.IList{Tobii.Research.LicenseKey})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.LicenseCollection" /> class
            from a generic list of license keys.
            </summary>
            <param name="licenseKeys">A list of license keys.</param>
        </member>
        <member name="M:Tobii.Research.LicenseCollection.Add(System.Byte[])">
            <summary>
            Adds a license to the collection.
            </summary>
            <param name="license">The license</param>
        </member>
        <member name="T:Tobii.Research.LicenseLevel">
            <summary>
            Defines the current license level of an eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Blocked">
            <summary>
            The eye tracker is blocked.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Consumer">
            <summary>
            Consumer license level.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Config">
            <summary>
            Config license level.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Professional">
            <summary>
            Professional license level.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Internal">
            <summary>
            Internal license level.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseLevel.Unknown">
            <summary>
            Unknown license level.
            </summary>
        </member>
        <member name="T:Tobii.Research.LogEventArgs">
            <summary>
            Provides data for the LogReceived event.
            </summary>
        </member>
        <member name="M:Tobii.Research.LogEventArgs.#ctor(System.Int64,Tobii.Research.LogSource,Tobii.Research.LogLevel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.LogEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
            <param name="source">The log source.</param>
            <param name="level">The log level.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="P:Tobii.Research.LogEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.LogEventArgs.Source">
            <summary>
            Gets the log source.
            </summary>
        </member>
        <member name="P:Tobii.Research.LogEventArgs.Level">
            <summary>
            Gets the log level.
            </summary>
        </member>
        <member name="P:Tobii.Research.LogEventArgs.Message">
            <summary>
            Gets the log message.
            </summary>
        </member>
        <member name="T:Tobii.Research.LogLevel">
            <summary>
            Define log levels
            </summary>
        </member>
        <member name="F:Tobii.Research.LogLevel.Error">
            <summary>
            Log level error.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogLevel.Warning">
            <summary>
            Log level warning.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogLevel.Information">
            <summary>
            Log level information.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogLevel.Debug">
            <summary>
            Log level debug.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogLevel.Trace">
            <summary>
            Log level trace.
            </summary>
        </member>
        <member name="T:Tobii.Research.NotInCalibrationModeException">
            <summary>
            Is thrown when the eye tracker is supposed to be in calibration mode but is not.
            </summary>
        </member>
        <member name="M:Tobii.Research.NotInCalibrationModeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NotInCalibrationModeException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.NotInCalibrationModeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NotInCalibrationModeException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.NotInCalibrationModeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NotInCalibrationModeException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.NotInCalibrationModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NotInCalibrationModeException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.AlreadyInCalibrationModeException">
            <summary>
            Is thrown when the eye tracker is already in calibration mode.
            </summary>
        </member>
        <member name="M:Tobii.Research.AlreadyInCalibrationModeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.AlreadyInCalibrationModeException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.AlreadyInCalibrationModeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.AlreadyInCalibrationModeException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.AlreadyInCalibrationModeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.AlreadyInCalibrationModeException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.AlreadyInCalibrationModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.AlreadyInCalibrationModeException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.InternalErrorException">
            <summary>
            Is thrown on internal errors in the API.
            </summary>
        </member>
        <member name="M:Tobii.Research.InternalErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InternalErrorException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.InternalErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InternalErrorException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InternalErrorException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InternalErrorException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.EyeImageRawEventArgs">
            <summary>
            Provides data for the EyeImageRawReceived event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.EyeImageRawEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Tobii.Research.EyeImageType,System.Int32,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeImageRawEventArgs" /> class given data for all members.
            </summary>
            <param name="bitsPerPixel">Number of bits per pixel</param>
            <param name="paddingBitsPerPixel">The padding bits per pixel</param>
            <param name="width">The width in pixels</param>
            <param name="height">The height in pixels</param>
            <param name="imageType">The type of eye image</param>
            <param name="cameraId">Which camera generated the image.</param>
            <param name="imageData">The image data, one row after another, starting with the top left pixel.</param>
            <param name="deviceTimeStamp">The eye tracker time stamp.</param>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.BitsPerPixel">
            <summary>
            Gets the bits per pixel for the eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.PaddingBitsPerPixel">
            <summary>
            Gets the padding bits per pixel for the eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.Width">
            <summary>
            Gets the width in pixel for the eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.Height">
            <summary>
            Gets the height in pixels for the eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.ImageType">
            <summary>
            Gets the type of eye image.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.CameraId">
            <summary>
            Gets which camera generated the image.
            </summary>        
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.ImageData">
            <summary>
            Gets the raw image data.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the eye tracker's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeImageRawEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.ScreenBasedCalibration">
            <summary>
             Provides methods and properties for managing calibrations for screen based eye trackers.
            </summary>
        </member>
        <member name="F:Tobii.Research.ScreenBasedCalibration.isInCalibrationMode">
            <summary>
            Gets the calibration mode status.
            </summary>
        </member>
        <member name="F:Tobii.Research.ScreenBasedCalibration.disposed">
            <summary>
            Track whether Dispose() has been called.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.#ctor(Tobii.Research.IEyeTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ScreenBasedCalibration"/> class
            </summary>
            <param name="eyeTracker">The eye tracker to calibrate.</param>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tobii.Research.ScreenBasedCalibration" /> class.
            This destructor will run only if the Dispose() method
            does not get called. Is called automatically prior to
            object destruction.
            </summary>
        </member>
        <member name="P:Tobii.Research.ScreenBasedCalibration.EyeTrackerAddress">
            <summary>
            Gets address to eye tracker. Used in error reporting.
            </summary>
        </member>
        <member name="P:Tobii.Research.ScreenBasedCalibration.NativeEyeTracker">
            <summary>
            Gets the eye tracker to calibrate.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.CollectData(Tobii.Research.NormalizedPoint2D)">
            <summary>
            Starts collecting data for a calibration point. The argument used is the point the
            calibration user is assumed to be looking at and is given in the active display area
            coordinate system.
            </summary>
            <param name="positionOnDisplayArea">Data for a calibration point.</param>
            <returns>The status of the calibration process.</returns>
            <CodeExample>ScreenBasedCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.CollectDataAsync(Tobii.Research.NormalizedPoint2D)">
            <summary>
            Asynchronous version of the CollectData method. This is useful since this operation
            can take a while on some eye trackers. Starts collecting data for a calibration point.
            The argument used is the point the calibration user is assumed to be looking at and is
            given in the Active Display Area Coordinate System.
            </summary>
            <param name="positionOnDisplayArea">Data for a calibration point.</param>
            <returns>An asynchronous operation that can be awaited and will contain the status of the calibration process.</returns>
            <CodeExample>ScreenBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.ComputeAndApply">
            <summary>
            Uses the collected data and tries to compute calibration parameters. If the calculation
            is successful, the result is applied to the eye tracker. If there is insufficient data
            to compute a new calibration or if the collected data is not good enough then
            calculation is failed and will not be applied.
            </summary>
            <returns>A CalibrationResult.</returns>
            <CodeExample>ScreenBasedCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.ComputeAndApplyAsync">
            <summary>
            Asynchronous version of the ComputeAndApply method. Uses the collected data and tries
            to compute calibration parameters.If the calculation is successful, the result is
            applied to the eye tracker.If there is insufficient data to compute a new calibration
            or if the collected data is not good enough then calculation is failed and will not be
            applied.
            </summary>
            <returns>An asynchronous operation that will provide a CalibrationResult.</returns>
            <CodeExample>ScreenBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.DiscardData(Tobii.Research.NormalizedPoint2D)">
            <summary>
            Removes the collected data associated with a specific calibration point.
            </summary>
            <param name="positionOnDisplayArea">The calibration point to remove.</param>
            <CodeExample>ScreenBasedCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.EnterCalibrationMode">
            <summary>
            Enters the calibration mode and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <remarks>
            <CodeExample>ScreenBasedCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.EnterCalibrationModeAsync">
            <summary>
            Enters the calibration mode asynchronously and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>ScreenBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.LeaveCalibrationMode">
            <summary>
            Leaves the calibration mode.
            </summary>
            <remarks>
            <CodeExample>ScreenBasedCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.LeaveCalibrationModeAsync">
            <summary>
            Leaves the calibration mode asynchronously.
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>ScreenBasedCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.Dispose">
            <summary>
            Should be called when done with the Calibration object to release resources.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.Dispose(System.Boolean)">
            <summary> Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Set to true if the method is called from the user's code.</param>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.ThrowExceptionIfDisposed">
            <summary>
            Throws ObjectDisposedException if the calibration object is disposed.
            This method must be called from every method that make call to the core.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedCalibration.LeaveCalibrationModeInternal">
            <summary>
            Leaves the calibration mode without checking if disposed.
            </summary>
        </member>
        <member name="T:Tobii.Research.EyeData">
            <summary>
            Provides properties for the eye data.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeData.#ctor(Tobii.Research.GazePoint,Tobii.Research.PupilData,Tobii.Research.GazeOrigin)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeData" /> class given data for all members.
            </summary>
            <param name="gazePoint">The gaze point data.</param>
            <param name="pupil">The pupil data.</param>
            <param name="gazeOrigin">A gaze origin data.</param>
        </member>
        <member name="P:Tobii.Research.EyeData.GazePoint">
            <summary>
            Gets the gaze point data.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeData.Pupil">
            <summary>
            Gets the pupil data.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeData.GazeOrigin">
            <summary>
            Gets the gaze origin data.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeData.op_Equality(Tobii.Research.EyeData,Tobii.Research.EyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.EyeData"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.EyeData.op_Inequality(Tobii.Research.EyeData,Tobii.Research.EyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.EyeData"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.EyeData.Equals(Tobii.Research.EyeData)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.EyeData"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.EyeData.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.EyeData"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.EyeData.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.GazeOrigin">
            <summary>
            Provides properties for the gaze origin.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.#ctor(Tobii.Research.Point3D,Tobii.Research.NormalizedPoint3D,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.GazeOrigin" /> class given data for all members.
            </summary>
            <param name="positionInUserCoordinates">The gaze origin position in 3D in the user coordinate system.</param>
            <param name="positionInTrackBoxCoordinates">The normalized gaze origin in track box coordinate system.</param>
            <param name="validity">The validity of the gaze origin data.</param>
        </member>
        <member name="P:Tobii.Research.GazeOrigin.PositionInUserCoordinates">
            <summary>
            Gets the gaze origin position in 3D in the user coordinate system.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeOrigin.PositionInTrackBoxCoordinates">
            <summary>
            Gets normalized gaze origin in track box coordinate system.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeOrigin.Validity">
            <summary>
            Gets the validity of the gaze origin data.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.op_Equality(Tobii.Research.GazeOrigin,Tobii.Research.GazeOrigin)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.GazeOrigin"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.op_Inequality(Tobii.Research.GazeOrigin,Tobii.Research.GazeOrigin)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.GazeOrigin"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.Equals(Tobii.Research.GazeOrigin)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.GazeOrigin"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.GazeOrigin"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.GazeOrigin.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.GazePoint">
            <summary>
            Provides properties for the gaze point.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazePoint.#ctor(Tobii.Research.NormalizedPoint2D,Tobii.Research.Point3D,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.GazePoint" /> class given data for all members.
            </summary>
            <param name="positionOnDisplayArea">The gaze point position in 2D on the active display area.</param>
            <param name="positionInUserCoordinates">The gaze point position in 3D in the user coordinate system.</param>
            <param name="validity">The validity of the gaze point data.</param>
        </member>
        <member name="P:Tobii.Research.GazePoint.PositionOnDisplayArea">
            <summary>
            Gets the gaze point position in 2D on the active display area.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazePoint.PositionInUserCoordinates">
            <summary>
            Gets the gaze point position in 3D in the user coordinate system.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazePoint.Validity">
            <summary>
            Gets the validity of the gaze point data.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazePoint.op_Equality(Tobii.Research.GazePoint,Tobii.Research.GazePoint)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.GazePoint"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.GazePoint.op_Inequality(Tobii.Research.GazePoint,Tobii.Research.GazePoint)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.GazePoint"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.GazePoint.Equals(Tobii.Research.GazePoint)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.GazePoint"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.GazePoint.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.GazePoint"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.GazePoint.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.EyeTrackingModeCollection">
            <summary>
            Represents a read-only collection of eye tracking modes.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTrackingModeCollection.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackingModeCollection" /> class
            from a generic list of eye tracking modes.
            </summary>
            <param name="eyeTrackingModes">A list of eye tracking modes.</param>
        </member>
        <member name="T:Tobii.Research.GazeOutputFrequencyCollection">
            <summary>
            Represents a read-only collection of gaze output frequencies.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazeOutputFrequencyCollection.#ctor(System.Collections.Generic.IList{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.GazeOutputFrequencyCollection" /> class
            from a generic list of gaze output frequencies.
            </summary>
            <param name="gazeOutputFrequencies">A list of gaze output frequencies.</param>
        </member>
        <member name="T:Tobii.Research.EyeTrackerCollection">
            <summary>
            Represents a read-only collection of IEyeTracker objects.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTrackerCollection.#ctor(System.Collections.Generic.IList{Tobii.Research.IEyeTracker})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackerCollection" /> class
            from a generic list of eye trackers.
            </summary>
            <param name="eyeTrackers">A list of <see cref="T:Tobii.Research.IEyeTracker"/> objects.</param>
        </member>
        <member name="T:Tobii.Research.ScreenBasedMonocularCalibration">
            <summary>
             Provides methods and properties for managing monocular and bi-monocular calibrations for screen based eye trackers.
             This type of calibration is not supported by all eye trackers. Check the DeviceCapabilities of the eye tracker first!
            </summary>
        </member>
        <member name="F:Tobii.Research.ScreenBasedMonocularCalibration.isInCalibrationMode">
            <summary>
            Gets the calibration mode status.
            </summary>
        </member>
        <member name="F:Tobii.Research.ScreenBasedMonocularCalibration.disposed">
            <summary>
            Track whether Dispose() has been called.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.#ctor(Tobii.Research.IEyeTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ScreenBasedMonocularCalibration"/> class
            </summary>
            <param name="eyeTracker">The eye tracker to calibrate.</param>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tobii.Research.ScreenBasedMonocularCalibration" /> class.
            This destructor will run only if the Dispose() method
            does not get called. Is called automatically prior to
            object destruction.
            </summary>
        </member>
        <member name="P:Tobii.Research.ScreenBasedMonocularCalibration.EyeTrackerAddress">
            <summary>
            Gets address to eye tracker. Used in error reporting.
            </summary>
        </member>
        <member name="P:Tobii.Research.ScreenBasedMonocularCalibration.NativeEyeTracker">
            <summary>
            Gets the eye tracker to calibrate.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.CollectData(Tobii.Research.NormalizedPoint2D,Tobii.Research.SelectedEye)">
            <summary>
            Collects data for a calibration point for the selected eye(s).
            The point argument is the point on the display the user is assumed
            to be looking at and is given in the active display area coordinate system.
            coordinate system.
            </summary>
            <param name="positionOnDisplayArea">Data for a calibration point.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to collect data for the monocular calibration.</param>
            <returns>The status of the calibration process.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.CollectDataAsync(Tobii.Research.NormalizedPoint2D,Tobii.Research.SelectedEye)">
            <summary>
            Asynchronous version of the CollectData method. This is useful since this operation
            can take a while on some eye trackers. Starts collecting data for a calibration point for
            the selected eye(s). The point argument is the point on the display the user is assumed to be
            looking at and is given in the active display area coordinate system.
            </summary>
            <param name="positionOnDisplayArea">Data for a calibration point.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to collect data for the monocular calibration.</param>
            <returns>An asynchronous operation that can be awaited and will contain the status of the calibration process.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.ComputeAndApply">
            <summary>
            Uses the collected data and tries to compute calibration parameters. If the calculation
            is successful, the result is applied to the eye tracker. If there is insufficient data to
            compute a new calibration or if the collected data is not good enough then calibration is
            failed and will not be applied.
            </summary>
            <returns>A CalibrationResult.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.ComputeAndApplyAsync">
            <summary>
            Asynchronous version of the ComputeAndApply method. Uses the collected data and tries
            to compute calibration parameters. If the calculation is successful, the result is applied
            to the eye tracker. If there is insufficient data to compute a new calibration or if the
            collected data is not good enough then calculation is failed and will not be applied.
            </summary>
            <returns>An asynchronous operation that will provide a CalibrationResult.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.DiscardData(Tobii.Research.NormalizedPoint2D,Tobii.Research.SelectedEye)">
            <summary>
            Removes the collected data for the specified eye(s) and calibration point.
            </summary>
            <param name="positionOnDisplayArea">The calibration point to remove.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to discard data for the monocular calibration.</param>
            <CodeExample>ScreenBasedMonocularCalibration_Calibrate.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.EnterCalibrationMode">
            <summary>
            Enters the calibration mode and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <remarks>
            <CodeExample>ScreenBasedMonocularCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.EnterCalibrationModeAsync">
            <summary>
            Enters the calibration mode asynchronously and the eye tracker is made ready for collecting data
            and calculating new calibrations
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.LeaveCalibrationMode">
            <summary>
            Leaves the calibration mode.
            </summary>
            <remarks>
            <CodeExample>ScreenBasedMonocularCalibration_Calibrate.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.LeaveCalibrationModeAsync">
            <summary>
            Leaves the calibration mode asynchronously.
            </summary>
            <returns>An asynchronous operation that can be awaited.</returns>
            <CodeExample>ScreenBasedMonocularCalibration_CalibrateAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.Dispose">
            <summary>
            Should be called when done with the Calibration object to release resources.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.Dispose(System.Boolean)">
            <summary> Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Set to true if the method is called from the user's code.</param>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.ThrowExceptionIfDisposed">
            <summary>
            Throws ObjectDisposedException if the calibration object is disposed.
            This method must be called from every method that make call to the core.
            </summary>
        </member>
        <member name="M:Tobii.Research.ScreenBasedMonocularCalibration.LeaveCalibrationModeInternal">
            <summary>
            Leaves the calibration mode without checking if disposed.
            </summary>
        </member>
        <member name="T:Tobii.Research.SelectedEye">
            <summary>
            Defines the selected eye.
            </summary>
        </member>
        <member name="F:Tobii.Research.SelectedEye.LeftEye">
            <summary>
            Left eye selected
            </summary>
        </member>
        <member name="F:Tobii.Research.SelectedEye.RightEye">
            <summary>
            Right eye selected.
            </summary>
        </member>
        <member name="F:Tobii.Research.SelectedEye.BothEyes">
            <summary>
            Both eyes selected.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.EyeTrackerInterop">
            <summary>
            All interop calls to the eye tracker must be done on instances of this class. It
            communicates with the eye tracker hardware
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.dataChangeObservers">
            <summary>
            Subscribers to data changes.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.dataChangeObserversLock">
            <summary>
            Lock when accessing dataChangeObservers.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.eyeTrackerData">
            <summary>
            Eye tracker data from native code. The key is a pointer to the native eye tracker object.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.eyeTrackerDataLock">
            <summary>
            Lock when accessing eyeTrackerData.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TobiiProInterop.EyeTrackerInterop" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.Terminate">
            <summary>
            Terminate SDK.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.FindAllEyeTrackers">
            <summary>
            Search for eye trackers.
            </summary>
            <returns>A list of meta data to found eye trackers.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.Get(System.Uri)">
            <summary>
            Gets data for an eye tracker given an URI.
            </summary>
            <param name="address">The address to the eye tracker to get data for.</param>
            <returns>Data for the eye tracker or null if we're unable to get it.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribe to gaze data for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving gaze data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback)">
            <summary>
            Unsubscribe from gaze data for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToGazeData.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribe to HMD gaze data for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving HMD gaze data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback)">
            <summary>
            Unsubscribe from HMD gaze data for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToHMDGazeData.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToTimeSynchronizationEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback,System.IntPtr)">
            <summary>
            Subscribe to time synchronization event for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">The callback for receiving time synchronization event.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromTimeSynchronizationEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback)">
            <summary>
            Unsubscribe from time synchronization event for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToTimeSynchronizationEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToEventErrorOccurredEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback,System.IntPtr)">
            <summary>
            Subscribe to event error occurred events for the eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">The callback for receiving event error occurred event.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromEventErrorOccurredEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback)">
            <summary>
            Unsubscribe from event error occurred events for the eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEventErrorOccurredEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetAllGazeOutputFrequencies(System.IntPtr)">
            <summary>
            Gets a list of gaze output frequencies supported by the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>A list of available gaze output frequencies in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetGazeOutputFrequency(System.IntPtr)">
            <summary>
            Gets the gaze output frequency of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Returns the gaze output frequency in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SetGazeOutputFrequency(System.IntPtr,System.Single)">
            <summary>
            Sets the gaze output frequency of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="gazeOutputFrequency">The new gaze output frequency in hertz. The value must be from the list
            returned by GetAllGazeOutputFrequencies().</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetAllEyeTrackingModes(System.IntPtr)">
            <summary>
            Gets a list of eye tracking modes supported by the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>A list of valid and available eye tracking modes.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetEyeTrackingMode(System.IntPtr)">
            <summary>
            Gets the eye tracking mode of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The eye tracking mode.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SetEyeTrackingMode(System.IntPtr,System.String)">
            <summary>
            Sets the eye tracking mode of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="eyeTrackingMode">The new eye tracking mode. The string must be from the list
            returned by GetAllEyeTrackingModes().</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.EnterCalibrationMode(System.IntPtr)">
            <summary>
            Starts calibration on an eye tracker. Call LeaveCalibrationMode() when calibration is done.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.LeaveCalibrationMode(System.IntPtr)">
            <summary>
            Makes the eye tracker leave calibration mode.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.CollectCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Collects stimuli data for calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.CollectMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye)">
            <summary>
            Collects stimuli data for calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to collect data for the monocular calibration.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.HMDCollectCalibrationData(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            Collects stimuli data for HMD calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">x coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="y">y coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="z">z coordinate in the HMD coordinate system where the user is looking.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DiscardCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Discards stimuli data for calibration.You must call tobii_pro_calibration_start
            before calling this function. You can only call this function to discard data you
            have collected before with tobii_pro_calibration_collect_data_2d.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DiscardMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye)">
            <summary>
            Discards stimuli data for calibration.You must call tobii_pro_calibration_start
            before calling this function. You can only call this function to discard data you
            have collected before with tobii_pro_calibration_collect_data_2d.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to discard data for the monocular calibration.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ComputeAndApplyCalibration(System.IntPtr)">
            <summary>
            Computes calibration from collected stimuli data and applies it if successful. You must
            call tobii_pro_calibration_start before calling this function. You should successfully
            call tobii_pro_calibration_collect_data2d for at least two points before calling this function.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ComputeAndApplyMonocularCalibration(System.IntPtr)">
            <summary>
            Computes calibration from collected stimuli data and applies it if successful. You must
            call tobii_pro_calibration_start before calling this function. You should successfully
            call tobii_pro_calibration_collect_data2d for at least two points before calling this function.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetCalibrationResult(System.IntPtr)">
            <summary>
            Gets the result of a calibration.
            You should call ComputeAndApplyCalibration successfully before calling this method.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>List of calibration points from the calibration.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.RetrieveCalibrationData(System.IntPtr)">
            <summary>
            Gets the calibration data used currently by the eye tracker. This data can be saved to
            a file for later use.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The retrieved calibration data.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ApplyCalibrationData(System.IntPtr,Tobii.Research.CalibrationData)">
            <summary>
            Sets the provided calibration data to the eye tracker, which means it will be
            active calibration.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="calibrationData">The calibration data to apply.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetDisplayArea(System.IntPtr)">
            <summary>
            Gets the size and corners of the display area.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The display area.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SetDisplayArea(System.IntPtr,Tobii.Research.DisplayArea)">
            <summary>
            Sets the display area.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="displayArea">The new display area.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromLogs">
            <summary>
            Unsubscribes to debug logs
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToLogs(Tobii.Research.TobiiProInterop.TobiiProLogCallback)">
            <summary>
            Subscribes to debug logs for the entire API. Call UnsubscribeFromLogs() to stop
            receiving logs.
            </summary>
            <param name="callback">Callback that will receive the debug log.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ApplyLicenses(System.IntPtr,Tobii.Research.LicenseCollection)">
            <summary>
            Sets a key ring of licenses for unlocking features of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKeyRing">A license key ring.</param>
            <returns>A collection of failed licenses.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ClearAppliedLicenses(System.IntPtr)">
            <summary>
            Clears any previously applied licenses.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UpdateFirmware(System.IntPtr,System.Byte[])">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetSystemTimeStamp">
            <summary>
            Retrieves the time stamp from the system clock in microseconds.
            </summary>
            <returns>The time stamp from the system clock in microseconds.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToExternalSignalReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback,System.IntPtr)">
            <summary>
            Subscribe to external signal data.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the external signal data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromExternalSignalReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback)">
            <summary>
            Unsubscribe from external signal data.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToExternalSignalReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetTrackBox(System.IntPtr)">
            <summary>
            Gets the track box of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Returns the track box of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetDiagnosticsPackage(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>A diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToEyeImageReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback,System.IntPtr)">
            <summary>
            Subscribes to the eye image received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the eye image.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromEyeImageReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback)">
            <summary>
            Unsubscribes from the eye image received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEyeImageReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToEyeImageRawReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback,System.IntPtr)">
            <summary>
            Subscribes to the eye image raw received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the eye image raw.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromEyeImageRawReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback)">
            <summary>
            Unsubscribes from the eye image raw received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEyeImageRawReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SubscribeToNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback,System.IntPtr)">
            <summary>
            Subscribes to notifications.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the notifications.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.UnsubscribeFromNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback)">
            <summary>
            Unsubscribes from notifications.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToNotifications.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SaveLicenseOnDevice(System.IntPtr,Tobii.Research.LicenseKey)">
            <summary>
            Saves a license on the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKey">The license key to save.</param>
            <returns>A LicenseValidationResult indicating if the save succeeded.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ReadLicenseFromDevice(System.IntPtr,Tobii.Research.LicenseKey@)">
            <summary>
            Reads a license from the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKey">The returned license key. Set to null if no license exists.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.ClearSavedLicenseFromDevice(System.IntPtr)">
            <summary>
            Clears any saved license from the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SetDeviceName(System.IntPtr,System.String)">
            <summary>
            Changes the device name. This is not supported by all eye trackers.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="deviceName">The eye tracker's desired name.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetHMDLensConfiguration(System.IntPtr)">
            <summary>
            Gets the current lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Returns the HMD lens configuration.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.SetHMDLensConfiguration(System.IntPtr,Tobii.Research.HMDLensConfiguration)">
            <summary>
            Sets the lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="hmdLensConfiguration">The lens configuration parameters to set.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetLicenseLevel(System.IntPtr)">
            <summary>
            Gets the current license level of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The current license level of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.CheckFirmwarePackageCompatibility(System.IntPtr,System.Byte[])">
            <summary>
            Checks firmware package compatibility.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="firmwarePackage">The firmware package read from file.</param>
            <returns>Information about package compatibility.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetSdkVersion">
            <summary>
            Returns the version of the SDK.
            </summary>
            <returns>Version of the SDK.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.Subscribe(Tobii.Research.TobiiProInterop.ITobiiObserver{Tobii.Research.TobiiProInterop.InteropEyeTrackerData})">
            <summary>
            Subscribes to data changes on eye tracker properties.
            </summary>
            <param name="observer">Observer that will get information about changes.</param>
            <returns>Object that should be disposed to unsubscribe.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.RefreshData(System.IntPtr,Tobii.Research.IEyeTracker)">
            <summary>
            Refreshes data on all data change observers. Call if you change a property on an eye tracker object.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="changeSource">The source of the change that has updated data.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.FindAndReturnNumberOfEyeTrackers">
            <summary>
            Finds eye trackers and returns the number of eye trackers available.
            </summary>
            <returns>The number of eye trackers.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.FindEyeTrackers(System.UInt32)">
            <summary>
            Finds eye trackers given the number of eye trackers available. Use
            BrowseAndReturnNumberOfEyeTrackers() to find out how many are available before
            calling this method.
            </summary>
            <param name="numberOfEyeTrackers">Number of eye trackers available.</param>
            <returns>An array of IntPtr to the discovered eye trackers</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetCalibrationDataSize(System.IntPtr)">
            <summary>
            Gets the size of calibration data returned by InteropNativeMethods.RetrieveCalibrationData().
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Gets the size of calibration data.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetSavedLicenseSize(System.IntPtr)">
            <summary>
            Returns the size of the saved license on the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Size of the saved license on the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetPropertyValue(System.IntPtr,Tobii.Research.TobiiProInterop.InteropProperty)">
            <summary>
            Gets a property value of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker to get property for.</param>
            <param name="property">The property to get.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.GetCapabilities(System.IntPtr)">
            <summary>
            Gets capabilities of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker to get capabilities for.</param>
            <returns>Capabilities of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.AddEyeTrackerData(System.IntPtr,Tobii.Research.TobiiProInterop.InteropEyeTrackerData)">
            <summary>
            Adds or updates data for an eye tracker. If properties have changed, observers are notified.
            </summary>
            <param name="eyeTracker">Pointer to native code eye tracker.</param>
            <param name="data">New eye tracker data.</param>
            <returns>Added or updated eye tracker data.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.EyeTrackerDataFromEyeTracker(System.IntPtr)">
            <summary>
            Creates an InteropEyeTrackerData object for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker to create object for.</param>
            <returns>An InteropEyeTrackerData object.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            Called when the process is about to exit.
            Unsubscribes everything so we don't get marshaling errors by being called
            by native code while process is shutting down.
            </summary>
            <param name="sender">The parameter is not used.</param>
            <param name="e">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber">
            <summary>
            Class for unsubscribing a data change observer.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber.observers">
            <summary>
            All observers.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber.observersLock">
            <summary>
            Lock when using observers.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber.observer">
            <summary>
            This observer.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber.#ctor(System.Collections.Generic.Dictionary{Tobii.Research.TobiiProInterop.ITobiiObserver{Tobii.Research.TobiiProInterop.InteropEyeTrackerData},Tobii.Research.TobiiProInterop.ITobiiObserver{Tobii.Research.TobiiProInterop.InteropEyeTrackerData}},System.Object,Tobii.Research.TobiiProInterop.ITobiiObserver{Tobii.Research.TobiiProInterop.InteropEyeTrackerData})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber" /> class.
            </summary>
            <param name="observers">All observers.</param>
            <param name="observersLock">Lock when using observers.</param>
            <param name="observer">This observer.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.EyeTrackerInterop.DataUnsubscriber.Dispose">
            <summary>
            Disposing unsubscribes.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropCallbacks">
            <summary>
            Static class with all callbacks that are sent to the core module.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.subscribersLock">
            <summary>
            Lock to use when accessing subscribers.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.subscribers">
            <summary>
            All subscribers to different types of events.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.gazeDataCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.hmdGazeDataCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.timeSyncDataCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.externalSignalReceivedCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.eventErrorCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.eyeImageCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.eyeImageRawCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.notificationCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType">
            <summary>
            Describes the different subscription types.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.GazeData">
            <summary>
            Gaze data subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.HMDGazeData">
            <summary>
            HMD gaze data subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.TimeSynchronization">
            <summary>
            Time synchronization subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.ExternalSignal">
            <summary>
            External signal subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.EventError">
            <summary>
            Event error subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.EyeImage">
            <summary>
            Eye image subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.EyeImageRaw">
            <summary>
            Eye image raw subscription.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType.Notification">
            <summary>
            Notification subscription.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.RemoveEyeTracker(System.IntPtr,Tobii.Research.EyeTracker)">
            <summary>
            Call this when disposing an eye tracker. It will unsubscribe from any active subscriptions if needed.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker.</param>
            <param name="eyeTracker">Tracker being disposed.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.SubscribeTo(Tobii.Research.EyeTracker,System.IntPtr,Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType)">
            <summary>
            Subscribes to a type of event for an eye tracker. Call when event is added.
            </summary>
            <param name="eyeTracker">Eye tracker that is subscribing.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <param name="subscriberType">Type of subscription.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.UnsubscribeFrom(Tobii.Research.EyeTracker,System.IntPtr,Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType)">
            <summary>
            Unsubscribes from a type of event for an eye tracker. Call when event is removed.
            </summary>
            <param name="eyeTracker">>Eye tracker that is unsubscribing.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <param name="subscriberType">Type of subscription.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.Subscribe(System.IntPtr,Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType)">
            <summary>
            Does the actual subscription in core module.
            </summary>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <param name="subscriberType">Type of subscription.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.Unsubscribe(System.IntPtr,Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType)">
            <summary>
            Does the actual unsubscribe in core module.
            </summary>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <param name="subscriberType">Type of subscription.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.GetSubscribers(Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType,System.IntPtr)">
            <summary>
            Gets all subscribers of a type given a pointer to a native eye tracker.
            </summary>
            <param name="subscriberType">Type of subscription.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <returns>A list of eye trackers subscribing to the event.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.CallCallbacks``2(Tobii.Research.TobiiProInterop.InteropCallbacks.SubscriberType,System.IntPtr,System.IntPtr,System.Func{``1,``0},System.Action{Tobii.Research.EyeTracker,``0},System.String)">
            <summary>
            Calls registered callbacks for a given event subscription.
            </summary>
            <typeparam name="TEventArgs">EventArgs class for this callback type.</typeparam>
            <typeparam name="TInteropData">InteropData class for this callback type.</typeparam>
            <param name="subscriberType">Type of subscription.</param>
            <param name="dataRaw">Raw unmanaged data from core module.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
            <param name="createEventArgs">Function that can create an EventArgs object from an interop object.</param>
            <param name="callback">Callback to call with the event args.</param>
            <param name="callbackName">Name of callback for error reporting.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.CreateEyeImageFromInteropData(Tobii.Research.TobiiProInterop.InteropEyeImage)">
            <summary>
            Creates an eye image from interop data. This code isn't in the EyeImageEventArgs since it would have to implement IDisposable if the
            MemoryStream was created in its constructor, and we don't want our event args to implement IDisposable.
            </summary>
            <param name="interopData">Data from core.</param>
            <returns>Eye image as event args object.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.CreateEyeImageRawFromInteropData(Tobii.Research.TobiiProInterop.InteropEyeImageRaw)">
            <summary>
            Creates a eye image raw from interop data. This code isn't in the EyeImageRawEventArgs since it would have to implement IDisposable if the
            MemoryStream was created in its constructor, and we don't want our event args to implement IDisposable.
            </summary>
            <param name="interopData">Data from core.</param>
            <returns>Eye image raw as event args object.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.GazeDataCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Gaze data callback to send to core module.
            </summary>
            <param name="gazeDataRaw">Gaze data. Cast as InteropGazeData.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.HMDGazeDataCallback(System.IntPtr,System.IntPtr)">
            <summary>
            HMD gaze data callback to send to core module.
            </summary>
            <param name="hmdGazeDataRaw">HMD gaze data. Cast as InteropHMDGazeData.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.TimeSyncDataCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Time synchronization callback to send to core module.
            </summary>
            <param name="timeSyncDataRaw">Time synchronization data. Cast as InteropTimeSyncData.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.ExternalSignalReceivedCallback(System.IntPtr,System.IntPtr)">
            <summary>
            External signal callback to send to core module.
            </summary>
            <param name="externalSignalDataRaw">External signal data. Cast as InteropExternalSignalData.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.EyeImageCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Eye image callback to send to core module.
            </summary>
            <param name="eyeImageDataRaw">Eye image data. Cast as InteropEyeImage.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.EyeImageRawCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Eye image raw callback to send to core module.
            </summary>
            <param name="eyeImageRawDataRaw">Eye image raw data. Cast as InteropEyeImageRaw.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.NotificationCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Notification callback to send to core module.
            </summary>
            <param name="notificationRaw">Notification data. Cast as InteropNotification.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.EventErrorCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Event error callback to send to core module.
            </summary>
            <param name="stream_error">Stream error data from core module.</param>
            <param name="nativeEyeTracker">Pointer to eye tracker in native code.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropCallbacks.EyeTrackerReferenceEqualityComparer">
            <summary>
            IEqualityComparer checking same instance on EyeTracker objects. 
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.EyeTrackerReferenceEqualityComparer.Equals(Tobii.Research.EyeTracker,Tobii.Research.EyeTracker)">
            <summary>
            Equals implementation using Object equals.
            </summary>
            <param name="obj1">First EyeTracker to check for equal condition.</param>
            <param name="obj2">Second EyeTracker to check for equal condition.</param>
            <returns>True if reference equal.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropCallbacks.EyeTrackerReferenceEqualityComparer.GetHashCode(Tobii.Research.EyeTracker)">
            <summary>
            GetHashCode implementation using Object GetHashCode.
            </summary>
            <param name="obj">EyeTracker to get hash code for.</param>
            <returns>A list of eye trackers subscribing to the event.</returns>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropDisplayArea">
            <summary>
            Display area data from discovery module. This struct must memory match TobiiProDisplayArea
            in tobii_pro_eyetracker.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomLeftX">
            <summary>
            X coordinate of the bottom left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomLeftY">
            <summary>
            Y coordinate of the bottom left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomLeftZ">
            <summary>
            Z coordinate of the bottom left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomRightX">
            <summary>
            X coordinate of the bottom right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomRightY">
            <summary>
            Y coordinate of the bottom right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.BottomRightZ">
            <summary>
            Z coordinate of the bottom right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.Height">
            <summary>
            The height in millimeters of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopLeftX">
            <summary>
            X coordinate of the top left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopLeftY">
            <summary>
            Y coordinate of the top left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopLeftZ">
            <summary>
            Z coordinate of the top left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopRightX">
            <summary>
            X coordinate of the top right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopRightY">
            <summary>
            Y coordinate of the top right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.TopRightZ">
            <summary>
            Z coordinate of the top right corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayArea.Width">
            <summary>
            The width in millimeters of the active display area.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropDiagnostics">
            <summary>
            Diagnostics from core module.
            Note: This must have the exact same values and order as TobiiProDiagnostics in core.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.ImageCount">
            <summary>
            Image count.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.Frequency">
            <summary>
            Image frequency.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.IncludeImages">
            <summary>
            Include images (boolean).
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.Data">
            <summary>
            Diagnostic data returned.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.Capacity">
            <summary>
            Capacity of data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDiagnostics.Size">
            <summary>
            Size of data.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropExternalSignalData">
            <summary>
            External signal data from core.
            Note: This must have the exact same values and order as TobiiProExternalSignalData in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropExternalSignalData.DeviceTimeStamp">
            <summary>
            The eye tracker time stamp.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropExternalSignalData.SystemTimeStamp">
            <summary>
            The time stamp according to the computer's internal clock.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropExternalSignalData.Value">
            <summary>
            The value of the external signal port on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropExternalSignalData.ChangeType">
            <summary>
            The type of value change.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropEyeImage">
            <summary>
            Eye image data from discovery module. This struct must match TobiiProEyeImageGif in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.DeviceTimeStamp">
            <summary>
            The eye tracker time stamp.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.SystemTimeStamp">
            <summary>
            The time stamp according to the computer's internal clock.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.ImageType">
            <summary>
            The type of eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.CameraId">
            <summary>
            Which camera generated the image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.ImageSize">
            <summary>
            Size in bytes of the image data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImage.ImageData">
            <summary>
            The GIF image data.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropFirmwarePackageCompatibility">
            <summary>
            Firmware package compatibility from core module. This struct must match TobiiProFirmwarePackageCompatibility in tobii_pro header files.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropFirmwarePackageCompatibility.MatchModel">
            <summary>
            Not 0 if device model and package model match. 0 if they don't.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropFirmwarePackageCompatibility.FirmwareVersionOnDevice">
            <summary>
            The version of the firmware on the device.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropFirmwarePackageCompatibility.FirmwareVersionInPackage">
            <summary>
            The version of the firmware in the package.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropFirmwarePackageCompatibility.VersionComparison">
            <summary>
            Result of version comparison.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropHMDGazeData">
            <summary>
            HMD Gaze data from discovery module.
            Note: This must have the exact same values and order as TobiiProHMDGazeData in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.DeviceTimeStamp">
            <summary>
            Time stamp from eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.SystemTimeStamp">
            <summary>
            Time stamp from computer.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftGazeDirectionUnitVector">
            <summary>
            3D unit vector that describes the left gaze direction.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftGazeDirectionValidity">
            <summary>
            The data validity of the left gaze direction.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftGazeOriginPositionInHMDCoordinates">
            <summary>
            3D coordinates that describes the left gaze origin in (in mm).
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftGazeOriginValidity">
            <summary>
            The validity of the left HMD gaze origin data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftPupilDiameter">
            <summary>
            Left pupil diameter in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftPupilValidity">
            <summary>
            The data validity of the left pupil size.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftPupilPositionInTrackingArea">
            <summary>
            The (normalized) 2D coordinates that describes the left pupil's position in the HMD's tracking area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.LeftPupilPositionValidity">
            <summary>
            The validity of the pupil position data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightGazeDirectionUnitVector">
            <summary>
            3D unit vector that describes the right gaze direction.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightGazeDirectionValidity">
            <summary>
            The data validity of the Right gaze direction.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightGazeOriginPositionInHMDCoordinates">
            <summary>
            3D coordinates that describes the right gaze origin in (in mm).
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightGazeOriginValidity">
            <summary>
            The validity of the right HMD gaze origin data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightPupilDiameter">
            <summary>
            Right pupil diameter in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightPupilValidity">
            <summary>
            The data validity of the Right pupil size.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightPupilPositionInTrackingArea">
            <summary>
            The (normalized) 2D coordinates that describes the right pupil's position in the HMD's tracking area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDGazeData.RightPupilPositionValidity">
            <summary>
            The validity of the right pupil position data.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration">
            <summary>
            HMD lens configuration.
            Note: This must have the exact same values and order as TobiiProHMDLensConfiguration in tobii_pro_eyetracker.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration.Left">
            <summary>
            The point in HMD coordinate system that defines the position of the left lens (in millimeters)
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration.Right">
            <summary>
            The point in HMD coordinate system that defines the position of the left lens (in millimeters)
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration.#ctor(Tobii.Research.HMDLensConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TobiiProInterop.InteropHMDLensConfiguration" /> struct.
            </summary>
            <param name="hmdLensConfiguration">A HMDLensConfiguration object.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropNotification">
            <summary>
            Notification data from the Core module.
            Note: This must have the exact same values and order as TobiiProNotification in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotification.SystemTimeStamp">
            <summary>
            Time stamp from computer.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotification.NotificationType">
            <summary>
            Type of notification.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotification.GazeOutputFrequency">
            <summary>
            New frequency for gaze output frequency changed notification.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotification.DisplayArea">
            <summary>
            New display area for display area changed notification.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropNotificationType">
            <summary>
            Define notification types. Only used internally. The order must be exactly as
            TobiiProNotificationType in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.ConnectionLost">
            <summary>
            The connection to the eye tracker was lost.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.ConnectionRestored">
            <summary>
            The connection to the eye tracker was restored.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.CalibrationModeEntered">
            <summary>
            Calibration mode was entered on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.CalibrationModeLeft">
            <summary>
            Calibration mode was left on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.TrackBoxChanged">
            <summary>
            The track box was changed on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.DisplayAreaChanged">
            <summary>
            The display area was changed on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.GazeOutputFrequencyChanged">
            <summary>
            The gaze output frequency was changed on the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNotificationType.Unknown">
            <summary>
            Unknown notification from tracker. (Ignore)
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropProperty">
            <summary>
            Properties used in InteropNativeMethods::GetProperty. The order must be exactly as in TobiiProProperty in
            tobii_pro_eyetracker.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropProperty.Address">
            <summary>
            The address (URI) of the eye tracker device.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropProperty.DeviceName">
            <summary>
            The name of the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropProperty.SerialNumber">
            <summary>
            The serial number of the eye tracker. All eye trackers have a unique serial number.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropProperty.Model">
            <summary>
            The model of the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropProperty.FirmwareVersion">
            <summary>
            The firmware version of the eye tracker.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropEyeImageRaw">
            <summary>
            Eye image raw data from discovery module. This struct must match TobiiProEyeImage in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.DeviceTimeStamp">
            <summary>
            The eye tracker time stamp.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.SystemTimeStamp">
            <summary>
            The time stamp according to the computer's internal clock.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.BitsPerPixel">
            <summary>
            The bits per pixel for the eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.PaddingBitsPerPixel">
            <summary>
            The padding bits per pixel for the eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.Width">
            <summary>
            The width in pixel for the eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.Height">
            <summary>
            The height in pixels for the eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.ImageType">
            <summary>
            The type of eye image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.CameraId">
            <summary>
            Which camera generated the image.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.DataSize">
            <summary>
            Size in bytes of the image data.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropEyeImageRaw.Data">
            <summary>
            The image data.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropSdkVersion">
            <summary>
            SDK version from core module. This struct must match TobiiProSDKVersion in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropSdkVersion.Major">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropSdkVersion.Minor">
            <summary>
            The minor version.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropSdkVersion.Revision">
            <summary>
            The revision.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropSdkVersion.Build">
            <summary>
            The build number.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropStreamErrorData">
            <summary>
            Stream error from the Core module.
            Note: This must have the exact same values and order as TobiiProStreamErrorData in tobii_pro_streams.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStreamErrorData.SystemTimeStamp">
            <summary>
            Time stamp from computer.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStreamErrorData.ErrorType">
            <summary>
            Type of error.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStreamErrorData.ErrorSource">
            <summary>
            Error source.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStreamErrorData.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropTrackBox">
            <summary>
            Track box from core module.
            Note: This must have the exact same values and order as TobiiProTrackBox in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.FrontUpperRight">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.FrontUpperLeft">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.FrontLowerLeft">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.FrontLowerRight">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.BackUpperRight">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.BackUpperLeft">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.BackLowerLeft">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTrackBox.BackLowerRight">
            <summary>
            Position in track box.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropCalibrationPoint">
            <summary>
            Calibration points from core module.
            Note: This must have the exact same values and order as TobiiProCalibrationPoint in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCalibrationPoint.PositionOnDisplayArea">
            <summary>
            Position on display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCalibrationPoint.LeftMappedGazeOnDisplayArea">
            <summary>
            Left eye position on display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCalibrationPoint.LeftValidity">
            <summary>
            Validity of left eye position.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCalibrationPoint.RightMappedGazeOnDisplayArea">
            <summary>
            Right eye position on display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropCalibrationPoint.RightValidity">
            <summary>
            Validity of right eye position.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates">
            <summary>
            Display area data from discovery module. This struct must match TobiiProDisplayAreaCoordinates
            in tobii_pro_maintenance.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates.TopLeft">
            <summary>
            The top left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates.BottomLeft">
            <summary>
            The bottom left corner of the active display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates.TopRight">
            <summary>
            The top right corner of the active display area.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates.#ctor(Tobii.Research.DisplayArea)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TobiiProInterop.InteropDisplayAreaCoordinates" /> struct.
            </summary>
            <param name="displayArea">A <see cref="T:Tobii.Research.DisplayArea"/> object.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropGazeData">
            <summary>
            Gaze data from discovery module.
            Note: This must have the exact same values and order as TobiiProGazeData in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.DeviceTimeStamp">
            <summary>
            Time stamp from eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.SystemTimeStamp">
            <summary>
            Time stamp from computer.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazePointOnDisplayArea">
            <summary>
            Left normalized gaze point on display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazePointInUserCoordinateSystem">
            <summary>
            Left 3D gaze point relative to eye tracker origin in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazePointValidity">
            <summary>
            The data validity of the left gaze point.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftPupilDiameter">
            <summary>
            Left pupil diameter in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftPupilValidity">
            <summary>
            The data validity of the left pupil size.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazeOriginInUserCoordinateSystem">
            <summary>
            Left gaze origin relative to eye tracker in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazeOriginInTrackboxCoordinateSystem">
            <summary>
            Left normalized gaze origin in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.LeftGazeOriginValidity">
            <summary>
            The data validity of the left gaze origin.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazePointOnDisplayArea">
            <summary>
            Right normalized gaze point on display area.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazePointInUserCoordinateSystem">
            <summary>
            Right 3D gaze point relative to eye tracker origin in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazePointValidity">
            <summary>
            The data validity of the right gaze point.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightPupilDiameter">
            <summary>
            Right pupil diameter in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightPupilValidity">
            <summary>
            The data validity of the right pupil size.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazeOriginInUserCoordinateSystem">
            <summary>
            Right gaze origin relative to eye tracker in mm.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazeOriginInTrackboxCoordinateSystem">
            <summary>
            Right normalized gaze origin in track box.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropGazeData.RightGazeOriginValidity">
            <summary>
            The data validity of the right gaze origin.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback">
            <summary>
            Callback for getting gaze data.
            </summary>
            <param name="coreGazeDataRaw">Gaze data from native code. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropGazeData"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback">
            <summary>
            Callback for getting HMD gaze data.
            </summary>
            <param name="coreHMDGazeDataRaw">HMD gaze data from native code. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropHMDGazeData"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback">
            <summary>
            Callback for getting time sync data.
            </summary>
            <param name="timeSyncDataRaw">Time synchronization data from native code. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropTimeSyncData"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProLogCallback">
            <summary>
            Callback for getting debug logs.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
            <param name="logSource">The log source.</param>
            <param name="logLevel">The log level.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback">
            <summary>
            Callback for getting external signals.
            </summary>
            <param name="externalSignalDataRaw">External signal data from native code.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback">
            <summary>
            Callback for event errors.
            </summary>
            <param name="stream_error">Stream error data from core module.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback">
            <summary>
            Callback for eye images.
            </summary>
            <param name="eyeImageDataRaw">Eye image data from native code. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropEyeImage"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback">
            <summary>
            Callback for eye image raw.
            </summary>
            <param name="eyeImageRawDataRaw">Eye image raw data from native code. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropEyeImage"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.TobiiProNotificationCallback">
            <summary>
            Callback for notifications.
            </summary>
            <param name="notificationRaw">The notification. Cast as <see cref="T:Tobii.Research.TobiiProInterop.InteropNotification"/> to use.</param>
            <param name="userData">The parameter is not used.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropNativeMethods">
            <summary>
            This class is used for interop to the discovery module
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropNativeMethods.dllName">
            <summary>
            Name of the tobii_pro dll.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.FindAllEyeTrackers(System.IntPtr[],System.IntPtr,System.IntPtr@)">
            <summary>
            Find all eye trackers. First call FindAllEyeTrackers(null, 0, ref numberOfEyeTrackersReturned)
            to find out how many eye trackers there. Create the eyeTrackers array of an
            appropriate size and call again to get the actual eye trackers
            </summary>
            <param name="eyeTrackers">Found eye trackers will be stored in this array.</param>
            <param name="eyeTrackersArrayLength">Length of eyeTrackers array</param>
            <param name="numberOfEyeTrackersReturned">Number of eye trackers returned</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.Get(System.String,System.IntPtr@)">
            <summary>
            Gets data for an eye tracker given an URI.
            </summary>
            <param name="address">URI of eye tracker to get data for.</param>
            <param name="eyeTracker">Data for the eye tracker.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.Initialize">
            <summary>
            Initializes the SDK. Must be called once before other SDK methods are called.
            Call Terminate() when done with the SDK.
            </summary>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.Terminate">
            <summary>
            Terminates the SDK. Must be called once when done with the SDK.
            </summary>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribes to gaze data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the gaze data.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback)">
            <summary>
            Unsubscribes from gaze data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToGazeData.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribes to HMD gaze data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the HMD gaze data.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback)">
            <summary>
            Unsubscribes from HMD gaze data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToHMDGazeData.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToExternalSignal(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback,System.IntPtr)">
            <summary>
            Subscribes to external signals for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the external signal data.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromExternalSignal(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback)">
            <summary>
            Unsubscribes from external signals for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToExternalSignal.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToTimeSyncData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback,System.IntPtr)">
            <summary>
            Subscribes to time synchronization data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the time synchronization data.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromTimeSyncData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback)">
            <summary>
            Unsubscribes from time synchronization data for an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToTimeSyncData.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToEventErrors(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback,System.IntPtr)">
            <summary>
            Subscribes to event errors for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the stream errors.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromEventErrors(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback)">
            <summary>
            Unsubscribes from event errors for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToEventErrors.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToEyeImage(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback,System.IntPtr)">
            <summary>
            Subscribes to eye images for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the stream errors.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromEyeImage(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback)">
            <summary>
            Unsubscribes from eye images for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToEventErrors.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToEyeImageRaw(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback,System.IntPtr)">
            <summary>
            Subscribes to eye image raw for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive the stream errors.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromEyeImageRaw(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback)">
            <summary>
            Unsubscribes from eye image raw for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToEventErrors.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback,System.IntPtr)">
            <summary>
            Subscribes to notifications for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback that will receive notifications.</param>
            <param name="userData">The parameter is not used.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback)">
            <summary>
            Unsubscribes from notifications for the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="callback">Callback sent to SubscribeToNotifications.</param>
            <returns>An InteropStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetAllGazeOutputFrequencies(System.IntPtr,System.Single[],System.Int32,System.Int32@)">
            <summary>
            Gets available gaze output frequencies for an eye tracker. First call
            GetAllGazeOutputFrequencies(uri, null, 0, ref numberOfGazeOutputFrequenciesReturned) to find out how
            many gaze output frequencies there are. Create the gazeOutputFrequencies array of an appropriate size and call
            again to get the actual number of gaze output frequencies.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="gazeOutputFrequencies">Gaze output frequencies will be stored in this array.</param>
            <param name="gazeOutputFrequenciesArrayLength">Size of the gazeOutputFrequencies array.</param>
            <param name="numberOfGazeOutputFrequenciesReturned">Number of gaze output frequencies returned.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetGazeOutputFrequency(System.IntPtr,System.Single@)">
            <summary>
            Gets the gaze output frequency of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="gazeOutputFrequency">The current gaze output frequency is returned.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SetGazeOutputFrequency(System.IntPtr,System.Single)">
            <summary>
            Sets the gaze output frequency of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="gazeOutputFrequency">The new the gaze output frequency. Note that the the gaze output frequency must be one if the gaze output frequencies from GetAllGazeOutputFrequencies().</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetAllEyeTrackingModes(System.IntPtr,System.Byte[0:,0:],System.Int32,System.Int32@)">
            <summary>
            Gets available eye tracking modes for an eye tracker. First call
            GetAllEyeTrackingModes(uri, null, 0, eyeTrackingModesArrayLength) to
            find out how many eye tracking modes there are. Create the eyeTrackingModes array of
            an appropriate size and call again to get the actual eye tracking modes.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="eyeTrackingModes">eye tracking modes will be stored in this array.</param>
            <param name="eyeTrackingModesArrayLength">Size of the eyeTrackingModes array.</param>
            <param name="numberOfEyeTrackingModesReturned">Number of eye tracking modes returned.</param>
            <returns>TobiiProStatus.SeNotSupported if eye tracking modes aren't supported for this eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetEyeTrackingMode(System.IntPtr,System.Byte[])">
            <summary>
            Gets the current eye tracker mode of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="eyeTrackingMode">The current gaze output frequency is returned.</param>
            <returns>TobiiProStatus.SeNotSupported if eye tracking modes aren't supported for this eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SetEyeTrackingMode(System.IntPtr,System.String)">
            <summary>
            Sets the eye tracker mode of an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="eyeTrackingMode">The new eye tracker mode. Note that the eye tracker mode must be one of the eye tracking modes from GetAllEyeTrackingModes().</param>
            <returns>TobiiProStatus.SeNotSupported if eye tracking modes aren't supported for this eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.EnterCalibrationMode(System.IntPtr)">
            <summary>
            Enters the Calibration Mode and the Eye Tracker is made ready for collecting data and calculating new calibrations.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.LeaveCalibrationMode(System.IntPtr)">
            <summary>
            Leaves the Calibration Mode.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.CollectCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Starts collecting data for a calibration point. The argument used is the point the calibration user is assumed to
            be looking at and is given in the Active Display Area Coordinate System.
            You must call tobii_pro_calibration_enter_calibration_mode before calling this function.
            This function is blocking while collecting data and may take up to 10 seconds.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.CollectMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye,Tobii.Research.SelectedEye@)">
            <summary>
            Starts collecting data for a calibration point. The argument used is the point the calibration user is assumed to
            be looking at and is given in the Active Display Area Coordinate System.
            You must call tobii_pro_calibration_enter_calibration_mode before calling this function.
            This function is blocking while collecting data and may take up to 10 seconds.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to collect data for the monocular calibration.</param>
            <param name="collectedEyes"><see cref="T:Tobii.Research.SelectedEye"/> SelectedEye instance that indicates for which eyes data was collected for the monocular calibration.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.HMDCollectCalibrationData(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            Starts collecting data for a calibration point. The argument used is the point the calibration user is assumed to
            be looking at and is given in the HMD Coordinate System.
            You must call tobii_pro_calibration_enter_calibration_mode before calling this function.
            This function is blocking while collecting data and may take up to 10 seconds.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="x">x coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="y">y coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="z">z coordinate in the HMD coordinate system where the user is looking.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.DiscardCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Removes the collected data associated with a specific calibration point.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.DiscardMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye)">
            <summary>
            Removes the collected data associated with a specific calibration point.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to discard data for the monocular calibration.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ComputeAndApplyCalibration(System.IntPtr)">
            <summary>
            Uses the collected data and tries to compute calibration parameters. If the calculation is successful, the result is
            applied to the eye tracker.If there is insufficient data to compute a new calibration or if the collected data is
            not good enough then calibration is failed and will not be applied.
            /// </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ComputeAndApplyMonocularCalibration(System.IntPtr,Tobii.Research.SelectedEye@)">
            <summary>
            Uses the collected data and tries to compute calibration parameters. If the calculation is successful, the result is
            applied to the eye tracker.If there is insufficient data to compute a new calibration or if the collected data is
            not good enough then calibration is failed and will not be applied.
            /// </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="calibratedEyes"><see cref="T:Tobii.Research.SelectedEye"/> instance with the calibrated eyes in the monocular calibration.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetCalibrationResult(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Gets the result of the latest successful calibration.
            First call tobii_pro_calibration_get_calibration_result(uri, null, 0, size) to find out the array size needed, then
            create the array of appropriate size and call again to get the result.
            /// </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="points">Array of calibration points.</param>
            <param name="pointsSize">Size of points array.</param>
            <param name="numberOfPoints">Number of calibration points.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.RetrieveCalibrationData(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Retrieves the currently applied calibration of an eye tracker. This function should
            not be called during calibration. You should save the data and call ApplyCalibrationData()
            with the data when you want to re apply a calibration.
            First call RetrieveCalibrationData(uri, null, 0, size) to get the size needed
            for the calibration data. Then allocate the appropriate size and call again to get
            the actual data.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="data">The retrieved calibration data.</param>
            <param name="dataSize">The size of the allocated data.</param>
            <param name="sizeOfDataReturned">The size of the data returned.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ApplyCalibrationData(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Applies a calibration on an eye tracker. This function should not be called during
            calibration. You get the calibration data from RetrieveCalibrationData().
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="data">The retrieved calibration data.</param>
            <param name="dataSize">The size of the data.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetDisplayAreaCoordinates(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the display area coordinates.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="displayArea">The returned display area coordinates.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SetDisplayAreaCoordinates(System.IntPtr,System.IntPtr)">
            <summary>
            Sets the display area coordinates.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="displayArea">The new display area coordinates.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetDisplayArea(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the display area.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="displayArea">The returned display area.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UnsubscribeFromLogs">
            <summary>
            Unsubscribes to debug logs
            </summary>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SubscribeToLogs(Tobii.Research.TobiiProInterop.TobiiProLogCallback)">
            <summary>
            Subscribes to debug logs for the entire API.
            </summary>
            <param name="callback">Callback that will receive the gaze data.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ApplyLicenses(System.IntPtr,System.IntPtr[],System.IntPtr[],Tobii.Research.LicenseValidationResult[],System.IntPtr)">
            <summary>
            Sets a key ring of licenses for unlocking features of the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="licenseKeyRing">Licenses to use.</param>
            <param name="licenseKeysSize">Sizes of licenses in licenseKeyRing.</param>
            <param name="validationResults">Optional. Validation result for each license.</param>
            <param name="numberOfLicenses">Number of licenses in licenseKeyRing.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ClearAppliedLicenses(System.IntPtr)">
            <summary>
            Clears any previously applied licenses.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.UpgradeFirmware(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="data">The eye tracker firmware.</param>
            <param name="dataSize">The size in bytes of the eye tracker firmware.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetSystemTimeStamp(System.Int64@)">
            <summary>
            Retrieves the time stamp from the system clock in microseconds
            </summary>
            <param name="timeStamp">The returned time stamp in microseconds</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetTrackBox(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the track box of the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="trackBox">The returned track box.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ReportEventError(System.IntPtr,System.String)">
            <summary>
            Reports a user error in an event callback.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="message">Message to report.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetDiagnosticsPackage(System.IntPtr,System.IntPtr)">
            <summary>
            Gets diagnostics package from the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="diagnostics">Diagnostics package.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SaveLicenseOnDevice(System.IntPtr,System.IntPtr,System.IntPtr,Tobii.Research.LicenseValidationResult@)">
            <summary>
            Saves a license on the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="licenseKey">The license key to save.</param>
            <param name="licenseKeySize">The size in bytes of the license key.</param>
            <param name="validationResult">Validation result of license key.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ReadLicenseFromDevice(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Reads a license from the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="licenseKey">The returned license key. Caller allocates the memory.</param>
            <param name="licenseKeyCapacity">The capacity in bytes of licenseKey.</param>
            <param name="licenseKeySize">The size in bytes of the license key.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.ClearSavedLicenseFromDevice(System.IntPtr)">
            <summary>
            Clears any saved license from the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SetDeviceName(System.IntPtr,System.String)">
            <summary>
            Changes the device name. This is not supported by all eye trackers.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="deviceName">The eye tracker's desired name.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetHMDLensConfiguration(System.IntPtr,System.IntPtr)">
            <summary>
            Gets the current lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="hmdLensConfiguration">The returned HMD lens configuration.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.SetHMDLensConfiguration(System.IntPtr,System.IntPtr)">
            <summary>
            Sets the lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="hmdLensConfiguration">The new HMD lens configuration.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetLicenseLevel(System.IntPtr,Tobii.Research.LicenseLevel@)">
            <summary>
            Gets the current license level of the eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="licenseLevel">The current license level of the eye tracker.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.CheckFirmwarePackageCompatibility(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Checks firmware package compatibility.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="data">The firmware package read from file.</param>
            <param name="dataSize">Size of data.</param>
            <param name="packageCompatibility">Returned information about package compatibility. Cast to InteropFirmwarePackageCompatibility.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetSdkVersion(System.IntPtr)">
            <summary>
            Gets the SDK version.
            </summary>
            <param name="sdkVersion">Version of the SDK.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetProperty(System.IntPtr,Tobii.Research.TobiiProInterop.InteropProperty,System.Byte[])">
            <summary>
            Gets properties about an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="property">The property to get.</param>
            <param name="propertyValue">Value of the property returned. Allocate 128 bytes.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.InteropNativeMethods.GetCapabilities(System.IntPtr,Tobii.Research.Capabilities@)">
            <summary>
            Gets capabilities about an eye tracker.
            </summary>
            <param name="eyeTracker">Eye tracker from FindAllEyeTrackers or Get.</param>
            <param name="capabilities">Capabilities of the eye tracker.</param>
            <returns>A TobiiProStatus code.</returns>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropTimeSyncData">
            <summary>
            Time synchronization data from core.
            Note: This must have the exact same values and order as TobiiProTimeSyncData in tobii_pro.h.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTimeSyncData.SystemRequestTimeStamp">
            <summary>
            The computer clock when the request was sent to the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTimeSyncData.DeviceTimeStamp">
            <summary>
            The eye tracker time stamp.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropTimeSyncData.SystemResponseTimeStamp">
            <summary>
            The computer clock when the response was received from the eye tracker.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropEyeTrackerData">
            <summary>
            Represents an eye tracker returned from Discovery.Search(). It contains all the meta data
            needed to create an EyeTracker object.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.Address">
            <summary>
            Gets or sets the address of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.DeviceName">
            <summary>
            Gets or sets the name of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.SerialNumber">
            <summary>
            Gets or sets the serial number of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.Model">
            <summary>
            Gets or sets the model of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.FirmwareVersion">
            <summary>
            Gets or sets the eye tracker's firmware version.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.DeviceCapabilities">
            <summary>
            Gets or sets the capabilities of the device.
            </summary>
        </member>
        <member name="P:Tobii.Research.TobiiProInterop.InteropEyeTrackerData.NativeEyeTracker">
            <summary>
            Gets or sets a pointer to a native eye tracker object.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.IEyeTrackerInterop">
            <summary>
            Abstracts the hardware layer. Allows the interop to the lower layers to be mocked by replacing
            the physical implementation.
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.Terminate">
            <summary>
            Terminate SDK
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.FindAllEyeTrackers">
            <summary>
            Search for eye trackers..
            </summary>
            <returns>A list of meta data to found eye trackers.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.Get(System.Uri)">
            <summary>
            Gets data for an eye tracker given an URI.
            </summary>
            <param name="address">The address to the eye tracker to get data for.</param>
            <returns>Data for the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribe to gaze data for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving gaze data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProGazeDataCallback)">
            <summary>
            Unsubscribe from gaze data for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToGazeData.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback,System.IntPtr)">
            <summary>
            Subscribe to HMD gaze data for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving HMD gaze data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromHMDGazeData(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProHMDGazeDataCallback)">
            <summary>
            Unsubscribe from HMD gaze data for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToHMDGazeData.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToTimeSynchronizationEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback,System.IntPtr)">
            <summary>
            Subscribe to time synchronization event for an eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">The callback for receiving time synchronization event.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromTimeSynchronizationEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProTimeSyncDataCallback)">
            <summary>
            Unsubscribe from time synchronization event for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToTimeSynchronizationEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToEventErrorOccurredEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback,System.IntPtr)">
            <summary>
            Subscribe to event error occurred event for the eye tracker. Initialize must have been called before calling this.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">The callback for receiving event error occurred event.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromEventErrorOccurredEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEventErrorCallback)">
            <summary>
            Unsubscribe from time synchronization event for an eye tracker. You must subscribe before unsubscribing.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEventErrorOccurredEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetAllGazeOutputFrequencies(System.IntPtr)">
            <summary>
            Gets a list of gaze output frequencies supported by the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>A list of available gaze output frequencies in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetGazeOutputFrequency(System.IntPtr)">
            <summary>
            Gets the gaze output frequency of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The gaze output frequencies in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SetGazeOutputFrequency(System.IntPtr,System.Single)">
            <summary>
            Sets the gaze output frequency of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="gazeOutputFrequency">The new gaze output frequency in hertz. The value must be from the list
            returned by GetAllGazeOutputFrequencies().</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetAllEyeTrackingModes(System.IntPtr)">
            <summary>
            Gets a list of eye tracking modes supported by the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>A list of valid and available eye tracking modes.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetEyeTrackingMode(System.IntPtr)">
            <summary>
            Gets the eye tracking mode of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The eye tracking mode.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SetEyeTrackingMode(System.IntPtr,System.String)">
            <summary>
            Sets the eye tracking mode of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="eyeTrackingMode">The new eye tracking mode. The string must be from the list
            returned by GetAllEyeTrackingModes().</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.EnterCalibrationMode(System.IntPtr)">
            <summary>
            Makes the eye tracker enter calibration mode. Call LeaveCalibrationMode() when calibration is done.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.LeaveCalibrationMode(System.IntPtr)">
            <summary>
            Stops calibration on an eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.CollectCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Collects stimuli data for calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.CollectMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye)">
            <summary>
            Collects stimuli data for calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate on active display area where the user is looking.</param>
            <param name="y">Normalized y coordinate on active display area where the user is looking.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to collect data for the monocular calibration.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.HMDCollectCalibrationData(System.IntPtr,System.Single,System.Single,System.Single)">
            <summary>
            Collects stimuli data for HMD calibration. You must call tobii_pro_calibration_start
            before calling this function. This function is blocking while collecting data and
            may take up to 10 seconds.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">x coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="y">y coordinate in the HMD coordinate system where the user is looking.</param>
            <param name="z">z coordinate in the HMD coordinate system where the user is looking.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.DiscardCalibrationData(System.IntPtr,System.Single,System.Single)">
            <summary>
            Discards stimuli data for calibration.You must call tobii_pro_calibration_start
            before calling this function. You can only call this function to discard data you
            have collected before with tobii_pro_calibration_collect_data_2d.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.DiscardMonocularCalibrationData(System.IntPtr,System.Single,System.Single,Tobii.Research.SelectedEye)">
            <summary>
            Discards stimuli data for calibration.You must call tobii_pro_calibration_start
            before calling this function. You can only call this function to discard data you
            have collected before with tobii_pro_calibration_collect_data_2d.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="x">Normalized x coordinate of point to discard.</param>
            <param name="y">Normalized y coordinate of point to discard.</param>
            <param name="eyeToCalibrate"><see cref="T:Tobii.Research.SelectedEye"/> instance that selects for which eye to discard data for the monocular calibration.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ComputeAndApplyCalibration(System.IntPtr)">
            <summary>
            Computes calibration from collected stimuli data and applies it if successful. You must
            call tobii_pro_calibration_start before calling this function. You should successfully
            call tobii_pro_calibration_collect_data2d for at least two points before calling this function.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ComputeAndApplyMonocularCalibration(System.IntPtr)">
            <summary>
            Computes calibration from collected stimuli data and applies it if successful. You must
            call tobii_pro_calibration_start before calling this function. You should successfully
            call tobii_pro_calibration_collect_data2d for at least two points before calling this function.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The status of the calibration process.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetCalibrationResult(System.IntPtr)">
            <summary>
            Gets the result of a calibration.
            You should call ComputeAndApplyCalibration successfully before calling this method.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>List of calibration points from the calibration.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.RetrieveCalibrationData(System.IntPtr)">
            <summary>
            Gets the calibration data used currently by the eye tracker. This data can be saved to
            a file for later use.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The retrieved calibration data.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ApplyCalibrationData(System.IntPtr,Tobii.Research.CalibrationData)">
            <summary>
            Sets the provided calibration data to the eye tracker, which means it will be
            active calibration.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="calibrationData">The calibration data to apply.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetDisplayArea(System.IntPtr)">
            <summary>
            Gets the size and corners of the display area.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The display area.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SetDisplayArea(System.IntPtr,Tobii.Research.DisplayArea)">
            <summary>
            Sets the display area.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="displayArea">The new display area.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromLogs">
            <summary>
            Unsubscribes to debug logs
            </summary>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToLogs(Tobii.Research.TobiiProInterop.TobiiProLogCallback)">
            <summary>
            Subscribes to debug logs for the entire API. Call UnsubscribeFromLogs() to stop
            receiving logs.
            </summary>
            <param name="callback">Callback that will receive the debug log.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ApplyLicenses(System.IntPtr,Tobii.Research.LicenseCollection)">
            <summary>
            Sets a key ring of licenses for unlocking features of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKeyRing">A license key ring.</param>
            <returns>A collection of failed licenses.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ClearAppliedLicenses(System.IntPtr)">
            <summary>
            Clears any previously applied licenses.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UpdateFirmware(System.IntPtr,System.Byte[])">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetSystemTimeStamp">
            <summary>
            Retrieves the time stamp from the system clock in microseconds.
            </summary>
            <returns>The time stamp from the system clock in microseconds.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToExternalSignalReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback,System.IntPtr)">
            <summary>
            Subscribe to external signal data.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the external signal data.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromExternalSignalReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProExternalSignalReceivedCallback)">
            <summary>
            Unsubscribe from external signal data.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToExternalSignalReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetTrackBox(System.IntPtr)">
            <summary>
            Gets the track box of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Returns the track box of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetDiagnosticsPackage(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>A diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToEyeImageReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback,System.IntPtr)">
            <summary>
            Subscribes to the eye image received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the eye image.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromEyeImageReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageCallback)">
            <summary>
            Unsubscribes from the eye image received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEyeImageReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToEyeImageRawReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback,System.IntPtr)">
            <summary>
            Subscribes to the eye image raw received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the eye image raw.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromEyeImageRawReceivedEvent(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProEyeImageRawCallback)">
            <summary>
            Unsubscribes from the eye image raw received event.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToEyeImageRawReceivedEvent.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SubscribeToNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback,System.IntPtr)">
            <summary>
            Subscribes to notifications.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback receiving the notifications.</param>
            <param name="userData">User data that will be sent back to callback.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.UnsubscribeFromNotifications(System.IntPtr,Tobii.Research.TobiiProInterop.TobiiProNotificationCallback)">
            <summary>
            Unsubscribes from notifications.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="callback">Callback that was sent in in SubscribeToNotifications.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SaveLicenseOnDevice(System.IntPtr,Tobii.Research.LicenseKey)">
            <summary>
            Saves a license on the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKey">The license key to save.</param>
            <returns>A LicenseValidationResult indicating if the save succeeded.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ReadLicenseFromDevice(System.IntPtr,Tobii.Research.LicenseKey@)">
            <summary>
            Reads a license from the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="licenseKey">The returned license key. Set to null if no license exists.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.ClearSavedLicenseFromDevice(System.IntPtr)">
            <summary>
            Clears any saved license from the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SetDeviceName(System.IntPtr,System.String)">
            <summary>
            Changes the device name. This is not supported by all eye trackers.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="deviceName">The eye tracker's desired name.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetHMDLensConfiguration(System.IntPtr)">
            <summary>
            Gets the current lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>Returns the HMD lens configuration.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.SetHMDLensConfiguration(System.IntPtr,Tobii.Research.HMDLensConfiguration)">
            <summary>
            Sets the lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="hmdLensConfiguration">The lens configuration parameters to set.</param>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetLicenseLevel(System.IntPtr)">
            <summary>
            Gets the current license level of the eye tracker.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <returns>The current license level of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.CheckFirmwarePackageCompatibility(System.IntPtr,System.Byte[])">
            <summary>
            Checks firmware package compatibility.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="firmwarePackage">The firmware package read from file.</param>
            <returns>Information about package compatibility.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.GetSdkVersion">
            <summary>
            Returns the version of the SDK.
            </summary>
            <returns>Version of the SDK.</returns>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.IEyeTrackerInterop.RefreshData(System.IntPtr,Tobii.Research.IEyeTracker)">
            <summary>
            Refreshes data on all data change observers. Call if you change a property on an eye tracker object.
            </summary>
            <param name="nativeEyeTracker">Pointer to native eye tracker object.</param>
            <param name="changeSource">The source of the change that has updated data.</param>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.InteropStatus">
            <summary>
            Status codes returned by the discovery API.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.StatusOk">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FatalError">
            <summary>
            Fatal error. This should normally not happen.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.InitializeFailed">
            <summary>
            Failed to initialize the API. This is a fatal error.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.TerminateFailed">
            <summary>
            Failed to terminate the API.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.LocalBrowserCreateFailed">
            <summary>
            Failed to create browser for finding local devices.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.LocalBrowserPollFailed">
            <summary>
            Failed to poll local devices.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.ZeroConfBrowserCreateFailed">
            <summary>
            Failed to create zero configuration browser.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.ZeroConfBrowserPollFailed">
            <summary>
            Failed to poll devices from zero configuration browser.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FileBrowserCreateFailed">
            <summary>
            Failed to create browser that looks for devices in file.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FileBrowserPollFailed">
            <summary>
            Failed to poll devices from file browser.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.InvalidParameter">
            <summary>
            An invalid parameter was given to the method.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.InvalidOperation">
            <summary>
            The operation was invalid.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.Uninitialized">
            <summary>
            Internal core error code.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.OutOfBounds">
            <summary>
            A parameter is out of bounds
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.DisplayAreaNotValid">
            <summary>
            The display area is not valid.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.BufferTooSmall">
            <summary>
            The buffer is too small.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.NotInitialized">
            <summary>
            The API isn't initialized.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.AlreadyInitialized">
            <summary>
            The API is already initialized.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SavedLicenseFailedToApplyException">
            <summary>
            The license saved on the device failed to apply.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeInternal">
            <summary>
            Internal stream engine error.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeInsufficientLicense">
            <summary>
            The operation requires a higher license type.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeNotSupported">
            <summary>
            The operations isn't supported in the current context.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeNotAvailable">
            <summary>
            The device is unavailable.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeConnectionFailed">
            <summary>
            Connection to the device failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeTimedOut">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeAllocationFailed">
            <summary>
            Failed to allocate memory.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeAlreadyInitialized">
            <summary>
            The API is already initialized.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeNotInitialized">
            <summary>
            The API isn't initialized.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeInvalidParameter">
            <summary>
            An invalid parameter was given to the method.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeCalibrationAlreadyStarted">
            <summary>
            Calibration has already started.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeCalibrationNotStarted">
            <summary>
            Calibration isn't started.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeAlreadySubscribed">
            <summary>
            Already subscribed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeNotSubscribed">
            <summary>
            Not subscribed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeOperationFailed">
            <summary>
            Operation failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeConflictingApiInstances">
            <summary>
            Conflicting API instances.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeCalibrationBusy">
            <summary>
            Calibration busy.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeCallbackInProgress">
            <summary>
            Callback in progress.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeBufferTooSmall">
            <summary>
            The buffer is too small.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeFirmwareNoResponse">
            <summary>
            No response from firmware.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeInternalError">
            <summary>
            Internal error,
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeNotSupported">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeUnknownFirmwareVersion">
            <summary>
            Unknown firmware version.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeConnectionFailed">
            <summary>
            Connection failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeInvalidParameter">
            <summary>
            Invalid parameter.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeDeviceMismatch">
            <summary>
            Device mismatch.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeParseResponse">
            <summary>
            Parse response.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeOperationFailed">
            <summary>
            The firmware upgrade operation failed.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeAllocationFailed">
            <summary>
            Memory allocation failed during firmware upgrade.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.FirmwareUpgradeFirmwareNoResponse">
            <summary>
            The firmware failed to respond during firmware upgrade.
            </summary>
        </member>
        <member name="F:Tobii.Research.TobiiProInterop.InteropStatus.SeUnknown">
            <summary>
            Unknown internal error.
            </summary>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.ITobiiObservable`1">
            <summary>
            Implement to be observable for data changes.
            </summary>
            <typeparam name="T">The data type being observed.</typeparam>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.ITobiiObservable`1.Subscribe(Tobii.Research.TobiiProInterop.ITobiiObserver{`0})">
            <summary>
            Subscribes an observer to this observable.
            </summary>
            <param name="observer">Observer receiving change notifications.</param>
            <returns>IDisposable object. Dispose to stop subscription.</returns>
        </member>
        <member name="T:Tobii.Research.TobiiProInterop.ITobiiObserver`1">
            <summary>
            Implement to subscribe to changes on a ITobiiProObservable.
            </summary>
            <typeparam name="T">The data type being observed.</typeparam>
        </member>
        <member name="M:Tobii.Research.TobiiProInterop.ITobiiObserver`1.OnNext(`0)">
            <summary>
            Called from ITobiiProObservable when a value has changed.
            </summary>
            <param name="value">New value.</param>
        </member>
        <member name="T:Tobii.Research.GazeDataEventArgs">
            <summary>
            Provides data for the GazeDataReceived event.
            </summary>
        </member>
        <member name="M:Tobii.Research.GazeDataEventArgs.#ctor(Tobii.Research.TobiiProInterop.InteropGazeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.GazeDataEventArgs" /> class given an InteropGazeData object.
            </summary>
            <param name="data">Data from core module.</param>
        </member>
        <member name="P:Tobii.Research.GazeDataEventArgs.LeftEye">
            <summary>
            Gets the gaze data for the left eye.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeDataEventArgs.RightEye">
            <summary>
            Gets the gaze data for the right eye.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeDataEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the eye tracker's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.GazeDataEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.IEyeTracker">
            <summary>
            Provides methods and properties to manage and get data from an eye tracker.
            </summary>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.GazeDataReceived">
            <summary>
            Event fired when gaze data is received.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_GazeDataReceived.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.HMDGazeDataReceived">
            <summary>
            Event fired when HMD gaze data is received.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_HMDGazeDataReceived.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.TimeSynchronizationReferenceReceived">
            <summary>
            Occurs when the computer and the eye trackers clocks gets synchronized. To handle
            normal drifts between clocks the clocks are checked on regular basis, and this results
            in that the time stamps are adjusted for the drifts in the data streams. This drift
            handling is done in real time. The data received from this event could be used for an
            even more accurate drift adjustment in the post processing.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_TimeSynchronizationReferenceReceived.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.ExternalSignalReceived">
            <summary>
            Occurs when the value of the external signal port (TTL input) on the eye tracker device
            changes. Not all eye trackers have a sampling trigger port. The sampling feature could
            be used to synchronize the eye tracker data with data from other devices. The sampling
            data contains a time reference that matches the time reference on the time synchronized
            gaze data.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_ExternalSignalReceived.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.EventErrorOccurred">
            <summary>
            Fired when an error occurs on any of the other events for the eye tracker.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_EventErrorOccurred.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.EyeImageReceived">
            <summary>
            Occurs when a new eye image is received, and the occurrence depends on the eye tracker model.
            Not all eye tracker models support this feature. If no one is listening to gaze data, the
            eye tracker will only deliver full images, otherwise either cropped or full images will be
            delivered depending on whether or not the eye tracker has detected eyes.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_EyeImageEvent.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.EyeImageRawReceived">
            <summary>
            Occurs when a new eye image raw is received, and the occurrence depends on the eye tracker model.
            Not all eye tracker models support this feature. If no one is listening to gaze data, the
            eye tracker will only deliver full images, otherwise either cropped or full images will be
            delivered depending on whether or not the eye tracker has detected eyes.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_EyeImageRawEvent.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.GazeOutputFrequencyChanged">
            <summary>
            Occurs when the gaze output frequency has changed.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_GazeOutputFrequencyChanged.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.CalibrationModeEntered">
            <summary>
            Occurs when the the eye tracker enters calibration mode.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_CalibrationModeEntered.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.CalibrationModeLeft">
            <summary>
            Occurs when the the eye tracker leaves calibration mode.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_CalibrationModeLeft.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.DisplayAreaChanged">
            <summary>
            Occurs when the display area has changed.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_DisplayAreaChanged.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.ConnectionLost">
            <summary>
            Occurs when the client loses connection to the eye tracker.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_ConnectionLost.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.ConnectionRestored">
            <summary>
            Occurs when connection to the eye tracker is restored.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_ConnectionRestored.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.IEyeTracker.TrackBoxChanged">
            <summary>
            Occurs when the track box size has changed.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_TrackBoxChanged.cs</CodeExample>
            </remarks>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.Address">
            <summary>
            Gets the address (URI) of the eye tracker device.
            </summary>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.DeviceName">
            <summary>
            Gets the name of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.SerialNumber">
            <summary>
            Gets the serial number of the eye tracker. All physical eye trackers have a unique serial number.
            </summary>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.Model">
            <summary>
            Gets the model of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.FirmwareVersion">
            <summary>
            Gets the firmware version of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.IEyeTracker.DeviceCapabilities">
            <summary>
            Gets the capabilities of the device.
            </summary>
            <remarks>
            <CodeExample>EyeTrackingOperations_GetEyeTracker_Uri.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetAllGazeOutputFrequencies">
            <summary>
            Gets a list of gaze output frequencies supported by the eye tracker.
            </summary>
            <returns>A list of valid and available gaze output frequencies in hertz.</returns>
            <CodeExample>IEyeTracker_GazeOutputFrequencies.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetGazeOutputFrequency">
            <summary>
            Gets the gaze output frequency of the eye tracker.
            </summary>
            <returns>The gaze output frequency in hertz.</returns>
            <CodeExample>IEyeTracker_GazeOutputFrequencies.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.SetGazeOutputFrequency(System.Single)">
            <summary>
            Sets the gaze output frequency of the eye tracker.
            </summary>
            <param name="gazeOutputFrequency">The the gaze output frequency in hertz. The value must be from the list
            returned by GetAllGazeOutputFrequencies().</param>
            <CodeExample>IEyeTracker_GazeOutputFrequencies.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetAllEyeTrackingModes">
            <summary>
            Gets a list of eye tracking modes supported by the eye tracker.
            </summary>
            <returns>A list of valid and available eye tracking modes.</returns>
            <CodeExample>IEyeTracker_EyeTrackingModes.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetEyeTrackingMode">
            <summary>
            Gets the eye tracking mode of the eye tracker.
            </summary>
            <returns>The eye tracking mode.</returns>
            <CodeExample>IEyeTracker_EyeTrackingModes.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.SetEyeTrackingMode(System.String)">
            <summary>
            Sets the eye tracking mode of the eye tracker.
            </summary>
            <param name="eyeTrackingMode">The new eye tracking mode. The string must be from the list
            returned by GetAllEyeTrackingModes().</param>
            <CodeExample>IEyeTracker_EyeTrackingModes.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.RetrieveCalibrationData">
            <summary>
            Gets the calibration data used currently by the eye tracker. This data can be saved to
            a file for later use.
            </summary>
            <returns>The retrieved calibration data.</returns>
            <CodeExample>IEyeTracker_CalibrationData.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.ApplyCalibrationData(Tobii.Research.CalibrationData)">
            <summary>
            Sets the provided calibration data to the eye tracker, which means it will be
            active calibration.
            </summary>
            <param name="calibrationData">The calibration data to apply.</param>
            <CodeExample>IEyeTracker_CalibrationData.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.TryApplyLicenses(Tobii.Research.LicenseCollection,Tobii.Research.FailedLicenseCollection@)">
            <summary>
            Apply one or more licenses to unlock features of the eye tracker. A return value
            indicates whether all licenses where applied or not.
            </summary>
            <param name="licenses">A LicenseCollection containing the licenses to apply.</param>
            <param name="failedLicenses">This method always return a FailedLicensesCollection.
            When this method is successful the collection is empty, when at least one license
            failed to be applied, then the collection contains the failed licenses together
            with a reason for failing.</param>
            <returns>True if all licenses were successfully applied.</returns>
            <CodeExample>IEyeTracker_TryApplyLicenses.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.ClearAppliedLicenses">
            <summary>
            Clears any previously applied licenses.
            </summary>
            <remarks>
            <CodeExample>IEyeTracker_TryApplyLicenses.cs</CodeExample>
            </remarks>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetTrackBox">
            <summary>
            Gets the track box of the eye tracker.
            </summary>
            <returns>Returns the track box of the eye tracker.</returns>
            <CodeExample>IEyeTracker_GetTrackBox.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetDisplayArea">
            <summary>
            Gets the size and corners of the display area.
            </summary>
            <returns>The eye tracker's display area.</returns>
            <CodeExample>IEyeTracker_GetAndSetDisplayArea.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.SetDisplayArea(Tobii.Research.DisplayArea)">
            <summary>
            Sets the display area of the eye tracker.
            It is strongly recommended to use Eye Tracker Manager to calculate
            the display area coordinates as the origin of the User Coordinate
            System differs between eye tracker models."
            </summary>
            <param name="displayArea">The eye tracker's display area.</param>
            <CodeExample>IEyeTracker_GetAndSetDisplayArea.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.SetDeviceName(System.String)">
            <summary>
            Changes the device name. This is not supported by all eye trackers.
            </summary>
            <param name="deviceName">The eye tracker's desired name.</param>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.GetHMDLensConfiguration">
            <summary>
            Gets the current lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <returns>Returns the HMD lens configuration.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTracker.SetHMDLensConfiguration(Tobii.Research.HMDLensConfiguration)">
            <summary>
            Sets the lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="hmdLensConfiguration">The lens configuration parameters to set.</param>
        </member>
        <member name="T:Tobii.Research.IEyeTrackerMaintenance">
            <summary>
            Provides methods and properties to perform eye tracker maintenance.
            </summary>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.UpdateFirmware(System.Byte[])">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.UpdateFirmwareAsync(System.Byte[])">
            <summary>
            Updates the eye tracker firmware asynchronously.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
            <returns>An asynchronous operation that can be awaited.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.UpdateFirmware(System.IO.Stream)">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.UpdateFirmwareAsync(System.IO.Stream)">
            <summary>
            Updates the eye tracker firmware asynchronously.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
            <returns>An asynchronous operation that can be awaited.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.GetDiagnosticsPackage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package.
            </summary>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>A diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.GetDiagnosticsPackageAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package asynchronously.
            </summary>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>An asynchronous operation that will provide a diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.TrySaveLicenseOnDevice(Tobii.Research.LicenseKey,Tobii.Research.LicenseValidationResult@)">
            <summary>
            Tries to save a license on the eye tracker.
            </summary>
            <param name="licenseKey">The license key to save.</param>
            <param name="validationResult">Validation result when trying to save the license.</param>
            <returns>True if the license was saved successfully.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.TryReadLicenseFromDevice(Tobii.Research.LicenseKey@)">
            <summary>
            Tries to read a license from the eye tracker.
            </summary>
            <param name="licenseKey">The returned license key. Set to null if no license exists.</param>
            <returns>True if a license exists and was successfully read.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.ClearSavedLicenseFromDevice">
            <summary>
            Clears any saved license from the eye tracker.
            </summary>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.GetLicenseLevel">
            <summary>
            Gets the current license level of the eye tracker.
            </summary>
            <returns>The current license level of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.IEyeTrackerMaintenance.CheckFirmwarePackageCompatibility(System.Byte[])">
            <summary>
            Checks firmware package compatibility.
            </summary>
            <param name="firmwarePackage">The firmware package read from file.</param>
            <returns>Information about package compatibility.</returns>
        </member>
        <member name="T:Tobii.Research.PupilData">
            <summary>
            Provides properties for the pupil data.
            </summary>
        </member>
        <member name="M:Tobii.Research.PupilData.#ctor(System.Single,Tobii.Research.Validity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.PupilData" /> class given data for all members.
            </summary>
            <param name="pupilDiameter">The diameter of the pupil in millimeters.</param>
            <param name="validity">The validity of the pupil data.</param>
        </member>
        <member name="P:Tobii.Research.PupilData.PupilDiameter">
            <summary>
            Gets the diameter of the pupil in millimeters."
            </summary>
        </member>
        <member name="P:Tobii.Research.PupilData.Validity">
            <summary>
            Gets the validity of the pupil data.
            </summary>
        </member>
        <member name="M:Tobii.Research.PupilData.op_Equality(Tobii.Research.PupilData,Tobii.Research.PupilData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.PupilData"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.PupilData.op_Inequality(Tobii.Research.PupilData,Tobii.Research.PupilData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.PupilData"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.PupilData.Equals(Tobii.Research.PupilData)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.PupilData"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.PupilData.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.PupilData"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.PupilData.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.CalibrationEyeData">
            <summary>
            Represents calibration eye data.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.#ctor(Tobii.Research.NormalizedPoint2D,Tobii.Research.CalibrationEyeValidity)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationEyeData"/> class
            </summary>
            <param name="positionOnDisplayArea">The position of the mapped eye gaze.</param>
            <param name="validity">Information about if the sample was used or not in the calculation.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationEyeData.PositionOnDisplayArea">
            <summary>
            Gets the PositionOnDisplayArea of the mapped eye gaze.
            </summary>
        </member>
        <member name="P:Tobii.Research.CalibrationEyeData.Validity">
            <summary>
            Gets information about if the sample was used or not in the calculation.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.op_Equality(Tobii.Research.CalibrationEyeData,Tobii.Research.CalibrationEyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationEyeData"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.op_Inequality(Tobii.Research.CalibrationEyeData,Tobii.Research.CalibrationEyeData)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationEyeData"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.Equals(Tobii.Research.CalibrationEyeData)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.CalibrationEyeData"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.CalibrationEyeData"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationEyeData.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.CalibrationEyeValidity">
            <summary>
            Defines the validity of calibration eye sample.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationEyeValidity.InvalidAndNotUsed">
            <summary>
            The eye tracking failed or the calibration eye data is invalid.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationEyeValidity.ValidButNotUsed">
            <summary>
            Eye Tracking was successful, but the calibration eye data was not used in calibration e.g. gaze was to far away.
            </summary>
        </member>
        <member name="F:Tobii.Research.CalibrationEyeValidity.ValidAndUsed">
            <summary>
            The calibration eye data was valid and used in calibration.
            </summary>
        </member>
        <member name="T:Tobii.Research.CalibrationSample">
            <summary>
            Represents the data collected for a calibration sample.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.#ctor(Tobii.Research.CalibrationEyeData,Tobii.Research.CalibrationEyeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationSample"/> class
            </summary>
            <param name="leftEye">The calibration sample data for the left eye.</param>
            <param name="rightEye">The calibration sample data for the right eye.</param>
        </member>
        <member name="P:Tobii.Research.CalibrationSample.LeftEye">
            <summary>
            Gets the calibration sample data for the left eye.
            </summary>
        </member>
        <member name="P:Tobii.Research.CalibrationSample.RightEye">
            <summary>
            Gets the calibration sample data for the right eye.
            /// </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.op_Equality(Tobii.Research.CalibrationSample,Tobii.Research.CalibrationSample)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationSample"/> objects are equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.op_Inequality(Tobii.Research.CalibrationSample,Tobii.Research.CalibrationSample)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.CalibrationSample"/> objects are not equal.
            </summary>
            <param name="obj1">First object.</param>
            <param name="obj2">Second object.</param>
            <returns>True if the objects are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.Equals(Tobii.Research.CalibrationSample)">
            <summary>
            Checks if this object is equal to another <see cref="T:Tobii.Research.CalibrationSample"/> .
            </summary>
            <param name="other">Other object to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.CalibrationSample"/> .
            </summary>
            <param name="obj">Other object to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.CalibrationSample.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.CalibrationSampleCollection">
            <summary>
            Represents a read-only collection of CalibrationSample objects.
            </summary>
        </member>
        <member name="M:Tobii.Research.CalibrationSampleCollection.#ctor(System.Collections.Generic.IList{Tobii.Research.CalibrationSample})">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.CalibrationSampleCollection" /> class
            from a generic list of calibration samples.
            </summary>
            <param name="calibrationSamples">A list of calibration samples</param>
        </member>
        <member name="T:Tobii.Research.NormalizedPoint2D">
            <summary>
            Represents a normalized x- and y-coordinate point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NormalizedPoint2D" /> class given an x and y coordinate.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="P:Tobii.Research.NormalizedPoint2D.X">
            <summary>
            Gets the position of the point in the X axis.
            </summary>
        </member>
        <member name="P:Tobii.Research.NormalizedPoint2D.Y">
            <summary>
            Gets the position of the point in the Y axis.
            </summary>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.op_Equality(Tobii.Research.NormalizedPoint2D,Tobii.Research.NormalizedPoint2D)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.NormalizedPoint2D"/> objects are equal.
            </summary>
            <param name="obj1">First point.</param>
            <param name="obj2">Second point.</param>
            <returns>True if the points are equal.</returns>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.op_Inequality(Tobii.Research.NormalizedPoint2D,Tobii.Research.NormalizedPoint2D)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.NormalizedPoint2D"/> objects are not equal.
            </summary>
            <param name="obj1">First point.</param>
            <param name="obj2">Second point.</param>
            <returns>True if the points are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.Equals(Tobii.Research.NormalizedPoint2D)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.NormalizedPoint2D"/> .
            </summary>
            <param name="other">Other point to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.NormalizedPoint2D"/> .
            </summary>
            <param name="obj">Other point to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint2D.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.NormalizedPoint3D">
            <summary>
            Represents a normalized x-, y- and z-coordinate point in a three-dimensional space.
            </summary>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NormalizedPoint3D" /> class
            given an x, y and z coordinate.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The Z coordinate</param>
        </member>
        <member name="M:Tobii.Research.NormalizedPoint3D.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.NormalizedPoint3D" /> class
            given an array with x, y and z coordinate.
            </summary>
            <param name="coordinates">An array with x, y and z coordinate.</param>
        </member>
        <member name="T:Tobii.Research.TimeSynchronizationReferenceEventArgs">
            <summary>
            Provides data for the TimeSynchronizationReferenceReceived event.
            </summary>
        </member>
        <member name="M:Tobii.Research.TimeSynchronizationReferenceEventArgs.#ctor(Tobii.Research.TobiiProInterop.InteropTimeSyncData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TimeSynchronizationReferenceEventArgs" /> class given an InteropTimeSyncData object.
            </summary>
            <param name="interopData">Data from core module.</param>
        </member>
        <member name="P:Tobii.Research.TimeSynchronizationReferenceEventArgs.SystemRequestTimeStamp">
            <summary>
            Gets the time stamp in microseconds when the computer sent the request to the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.TimeSynchronizationReferenceEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds when the eye tracker received the request, according to the eye trackers clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.TimeSynchronizationReferenceEventArgs.SystemResponseTimeStamp">
            <summary>
            Gets the time stamp in microseconds when the computer received the response from the eye tracker.
            </summary>
        </member>
        <member name="T:Tobii.Research.Point3D">
            <summary>
            Represents an x-, y- and z-coordinate point in a three-dimensional space.
            </summary>
        </member>
        <member name="M:Tobii.Research.Point3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.Point3D" /> class given an x, y and z
            coordinate.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="z">The Z coordinate</param>
        </member>
        <member name="M:Tobii.Research.Point3D.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.Point3D" /> class given an array of
            coordinates.
            </summary>
            <param name="coordinates">An array with the x coordinate at index 0, the y coordinate
            at index 1 and the z coordinate at index 2.</param>
        </member>
        <member name="P:Tobii.Research.Point3D.X">
            <summary>
            Gets the position of the point in the X axis.
            </summary>
        </member>
        <member name="P:Tobii.Research.Point3D.Y">
            <summary>
            Gets the position of the point in the Y axis.
            </summary>
        </member>
        <member name="P:Tobii.Research.Point3D.Z">
            <summary>
            Gets the position of the point in the Z axis.
            </summary>
        </member>
        <member name="M:Tobii.Research.Point3D.op_Equality(Tobii.Research.Point3D,Tobii.Research.Point3D)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.Point3D"/> objects are equal.
            </summary>
            <param name="obj1">First point.</param>
            <param name="obj2">Second point.</param>
            <returns>True if the points are equal.</returns>
        </member>
        <member name="M:Tobii.Research.Point3D.op_Inequality(Tobii.Research.Point3D,Tobii.Research.Point3D)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.Point3D"/> objects are not equal.
            </summary>
            <param name="obj1">First point.</param>
            <param name="obj2">Second point.</param>
            <returns>True if the points are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.Point3D.Equals(Tobii.Research.Point3D)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.Point3D"/> .
            </summary>
            <param name="other">Other point to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.Point3D.Equals(System.Object)">
            <summary>
            Checks if this point is equal to another <see cref="T:Tobii.Research.Point3D"/> .
            </summary>
            <param name="obj">Other point to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.Point3D.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.ConnectionFailedException">
            <summary>
            Is thrown when connection to an eye tracker is lost or could not be established.
            </summary>
        </member>
        <member name="M:Tobii.Research.ConnectionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionFailedException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.ConnectionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionFailedException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.ConnectionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionFailedException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.ConnectionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ConnectionFailedException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.FeatureNotSupportedException">
            <summary>
            Is thrown when the eye tracker does not support the operation or if there is an
            insufficient license level when using a restricted feature. If there is a license problem
            The solution is to contact Tobii customer support and request a suitable license file.
            </summary>
        </member>
        <member name="M:Tobii.Research.FeatureNotSupportedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FeatureNotSupportedException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.FeatureNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FeatureNotSupportedException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.FeatureNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FeatureNotSupportedException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.FeatureNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.FeatureNotSupportedException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.EyeTrackerUnavailableException">
            <summary>
            Is thrown if the particular eye tracker is unavailable. Other eye trackers may be
            available.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTrackerUnavailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackerUnavailableException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTrackerUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackerUnavailableException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.EyeTrackerUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackerUnavailableException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.EyeTrackerUnavailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTrackerUnavailableException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.InsufficientLicenseException">
            <summary>
            Is thrown when there is an insufficient license level when using a restricted feature.
            The solution is to contact Tobii customer support and request a suitable license file.
            </summary>
        </member>
        <member name="M:Tobii.Research.InsufficientLicenseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InsufficientLicenseException" /> class.
            </summary>
        </member>
        <member name="M:Tobii.Research.InsufficientLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InsufficientLicenseException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Tobii.Research.InsufficientLicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InsufficientLicenseException" /> class with a specified error message and a
            reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="inner">The exception that is the cause of the current exception, or a
            null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Tobii.Research.InsufficientLicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.InsufficientLicenseException" /> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about
            the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:Tobii.Research.EyeTracker">
            <summary>
            Represents a default implementation of the IEyeTracker interface.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.disposed">
            <summary>
            Track whether Dispose() has been called.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.disposeLock">
            <summary>
            Lock used by IsDisposing. The intention is to stop events firing after dispose
            has been called. This can happen because events are run on background threads
            or queued in the windows message queue, depending on client application type.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.isDisposing">
            <summary>
            Field used by the IsDisposing property.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.addressInternal">
            <summary>
            The address of the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.deviceNameInternal">
            <summary>
            The name of the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.firmwareVersionInternal">
            <summary>
            The firmware version of the eye tracker.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.dataChangeObserver">
            <summary>
            Observer for property changes.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.#ctor(Tobii.Research.TobiiProInterop.InteropEyeTrackerData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTracker" /> class.
            </summary>
            <param name="eyeTrackerData">Data for the eye tracker.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Tobii.Research.EyeTracker" /> class.
            This destructor will run only if the Dispose() method
            does not get called. Is called automatically prior to
            object destruction.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.GazeDataReceived">
            <summary>
            Event fired when gaze data is received.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.HMDGazeDataReceived">
            <summary>
            Event fired when HMD gaze data is received.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.TimeSynchronizationReferenceReceived">
            <summary>
            Occurs when the computer and the eye trackers clocks gets synchronized. To handle
            normal drifts between clocks the clocks are checked on regular basis, and this results
            in that the time stamps are adjusted for the drifts in the data streams. This drift
            handling is done in real time. The data received from this event could be used for an
             even more accurate drift adjustment in the post processing.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ExternalSignalReceived">
            <summary>
            Occurs when the value of the external signal port (TTL input) on the eye tracker device
            changes. Not all eye trackers have a sampling trigger port. The sampling feature could
            be used to synchronize the eye tracker data with data from other devices. The sampling
            data contains a time reference that matches the time reference on the time synchronized
            gaze data.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EventErrorOccurred">
            <summary>
            Fired when an error occurs on any of the other events for the eye tracker.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EyeImageReceived">
            <summary>
            Occurs when a new eye image is received, and the occurrence depends on the eye tracker model.
            Not all eye tracker models support this feature. If no one is listening to gaze data, the
            eye tracker will only deliver full images, otherwise either cropped or full images will be
            delivered depending on whether or not the eye tracker has detected eyes.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EyeImageRawReceived">
            <summary>
            Occurs when a new eye image is received, and the occurrence depends on the eye tracker model.
            Not all eye tracker models support this feature. If no one is listening to gaze data, the
            eye tracker will only deliver full images, otherwise either cropped or full images will be
            delivered depending on whether or not the eye tracker has detected eyes.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.GazeOutputFrequencyChanged">
            <summary>
            Occurs when the gaze output frequency has changed.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.CalibrationModeEntered">
            <summary>
            Occurs when the the eye tracker enters calibration mode.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.CalibrationModeLeft">
            <summary>
            Occurs when the the eye tracker leaves calibration mode.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.DisplayAreaChanged">
            <summary>
            Occurs when the display area has changed.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ConnectionLost">
            <summary>
            Occurs when the client loses connection to the eye tracker.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ConnectionRestored">
            <summary>
            Occurs when connection to the eye tracker is restored.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.TrackBoxChanged">
            <summary>
            Occurs when the track box size has changed.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.PropertyChanged">
            <summary>
            Occurs when a property has changed its value.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.GazeDataReceivedInternal">
            <summary>
            Private event used to add values to from the GazeDataReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.HMDGazeDataReceivedInternal">
            <summary>
            Private event used to add values to from the GazeDataReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.TimeSynchronizedInternal">
            <summary>
            Private event used to add values to from the GazeDataReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ExternalSignalReceivedInternal">
            <summary>
            Private event used to add values from the ExternalSignalReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EventErrorOccurredInternal">
            <summary>
            Private event used to add values from the EventErrorOccurred event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EyeImageReceivedInternal">
            <summary>
            Private event used to add values from the EyeImageReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.EyeImageRawReceivedInternal">
            <summary>
            Private event used to add values from the EyeImageReceived event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.GazeOutputFrequencyChangedInternal">
            <summary>
            Private event used to add values from the GazeOutputFrequencyChanged event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.CalibrationModeEnteredInternal">
            <summary>
            Private event used to add values from the CalibrationModeEntered event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.CalibrationModeLeftInternal">
            <summary>
            Private event used to add values from the CalibrationModeLeft event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.DisplayAreaChangedInternal">
            <summary>
            Private event used to add values from the DisplayAreaChanged event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ConnectionLostInternal">
            <summary>
            Private event used to add values from the ConnectionLost event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.ConnectionRestoredInternal">
            <summary>
            Private event used to add values from the ConnectionRestored event.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTracker.TrackBoxChangedInternal">
            <summary>
            Private event used to add values from the TrackBoxChanged event.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.Address">
            <summary>
            Gets the URI that uniquely identifies the eye tracker
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.DeviceName">
            <summary>
            Gets the name of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.SerialNumber">
            <summary>
            Gets the serial number of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.Model">
            <summary>
            Gets the model of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.FirmwareVersion">
            <summary>
            Gets the firmware version of the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.DeviceCapabilities">
            <summary>
            Gets the capabilities of the device.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.NativeEyeTracker">
            <summary>
            Gets pointer to eye tracker object in native code.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTracker.IsDisposing">
            <summary>
            Gets or sets a value indicating whether we're currently inside the Dispose call.
            We shouldn't fire any events if this is true.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetAllGazeOutputFrequencies">
            <summary>
            Gets a list of gaze output frequencies supported by the eye tracker.
            </summary>
            <returns>A list of valid and available gaze output frequencies in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetGazeOutputFrequency">
            <summary>
            Gets the gaze output frequency of the eye tracker.
            </summary>
            <returns>The gaze output frequency in hertz.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.SetGazeOutputFrequency(System.Single)">
            <summary>
            Sets the gaze output frequency of the eye tracker.
            </summary>
            <param name="gazeOutputFrequency">The new gaze output frequency in hertz. The value must be from the list
            returned by GetAllGazeOutputFrequencies().</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetAllEyeTrackingModes">
            <summary>
            Gets the eye tracking mode of the eye tracker.
            </summary>
            <returns>A list of valid and available eye tracking modes.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetEyeTrackingMode">
            <summary>
            Gets the eye tracking mode of the eye tracker.
            </summary>
            <returns>The eye tracking mode.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.SetEyeTrackingMode(System.String)">
            <summary>
            Sets the eye tracking mode of the eye tracker.
            </summary>
            <param name="eyeTrackingMode">The new eye tracking mode. The string must be from the list
            returned by GetAllEyeTrackingModes().</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.RetrieveCalibrationData">
            <summary>
            Gets the calibration data used currently by the eye tracker. This data can be saved to
            a file for later use.
            </summary>
            <returns>The retrieved calibration data.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.ApplyCalibrationData(Tobii.Research.CalibrationData)">
            <summary>
            Sets the provided calibration data to the eye tracker, which means it will be
            active calibration.
            </summary>
            <param name="calibrationData">The calibration data to apply.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetDisplayArea">
            <summary>
            Gets the size and corners of the display area.
            </summary>
            <returns>The eye tracker's display area.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.SetDisplayArea(Tobii.Research.DisplayArea)">
            <summary>
            Sets the display area of the eye tracker.
            It is strongly recommended to use Eye Tracker Manager to calculate
            the display area coordinates as the origin of the User Coordinate
            System differs between eye tracker models."
            </summary>
            <param name="displayArea">The new display area.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.TryApplyLicenses(Tobii.Research.LicenseCollection,Tobii.Research.FailedLicenseCollection@)">
            <summary>
            Apply one or more licenses to unlock features of the eye tracker. A return value
            indicates whether all licenses where applied or not.
            </summary>
            <param name="licenses">A LicenseCollection containing the licenses to apply.</param>
            <param name="failedLicenses">This method always return a FailedLicensesCollection.
            When this method is successful the collection is empty, when at least one license
            failed to be applied, then the collection contains the failed licenses together
            with a reason for failing.</param>
            <returns>True if all licenses were successfully applied.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.ClearAppliedLicenses">
            <summary>
            Clears any previously applied licenses.
            </summary>
            <CodeExample>IEyeTracker_TryApplyLicenses.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#UpdateFirmware(System.Byte[])">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#UpdateFirmwareAsync(System.Byte[])">
            <summary>
            Updates the eye tracker firmware asynchronously.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
            <returns>An asynchronous operation that can be awaited.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#UpdateFirmware(System.IO.Stream)">
            <summary>
            Updates the eye tracker firmware.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#UpdateFirmwareAsync(System.IO.Stream)">
            <summary>
            Updates the eye tracker firmware asynchronously.
            </summary>
            <param name="firmware">The eye tracker firmware.</param>
            <returns>An asynchronous operation that can be awaited.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#GetDiagnosticsPackage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package.
            </summary>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>A diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#GetDiagnosticsPackageAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get eye tracker diagnostic package asynchronously.
            </summary>
            <param name="imageCount">Image count.</param>
            <param name="frequency">Image frequency.</param>
            <param name="includeImages">Include images.</param>
            <returns>An asynchronous operation that will provide a diagnostic package.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#TrySaveLicenseOnDevice(Tobii.Research.LicenseKey,Tobii.Research.LicenseValidationResult@)">
            <summary>
            Tries to save a license on the eye tracker.
            </summary>
            <param name="licenseKey">The license key to save.</param>
            <param name="validationResult">Validation result when trying to save the license.</param>
            <returns>True if the license was saved successfully.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#TryReadLicenseFromDevice(Tobii.Research.LicenseKey@)">
            <summary>
            Tries to read a license from the eye tracker.
            </summary>
            <param name="licenseKey">The returned license key. Set to null if no license exists.</param>
            <returns>True if a license exists and was successfully read.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#ClearSavedLicenseFromDevice">
            <summary>
            Clears any saved license from the eye tracker.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetTrackBox">
            <summary>
            Gets the track box of the eye tracker.
            </summary>
            <returns>Returns the track box of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.SetDeviceName(System.String)">
            <summary>
            Changes the device name. This is not supported by all eye trackers.
            </summary>
            <param name="deviceName">The eye tracker's desired name.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GetHMDLensConfiguration">
            <summary>
            Gets the current lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <returns>Returns the HMD lens configuration.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.SetHMDLensConfiguration(Tobii.Research.HMDLensConfiguration)">
            <summary>
            Sets the lens configuration of the HMD based eye tracker. The lens configuration describes how the lenses of the HMD device are positioned.
            </summary>
            <param name="hmdLensConfiguration">The lens configuration parameters to set.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#GetLicenseLevel">
            <summary>
            Gets the current license level of the eye tracker.
            </summary>
            <returns>The current license level of the eye tracker.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Tobii#Research#IEyeTrackerMaintenance#CheckFirmwarePackageCompatibility(System.Byte[])">
            <summary>
            Checks firmware package compatibility.
            </summary>
            <param name="firmwarePackage">The firmware package read from file.</param>
            <returns>Information about package compatibility.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Dispose">
            <summary>
            Should be called when done with the EyeTracker to release resources.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.GazeDataSubscribeCallback(Tobii.Research.GazeDataEventArgs)">
            <summary>
            Callback called from interop when new gaze data is received.
            </summary>
            <param name="data">Gaze data received.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.HMDGazeDataSubscribeCallback(Tobii.Research.HMDGazeDataEventArgs)">
            <summary>
            Callback called from interop when new HMD gaze data is received.
            </summary>
            <param name="data">HMD gaze data received.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.TimeSynchronizationCallback(Tobii.Research.TimeSynchronizationReferenceEventArgs)">
            <summary>
            Callback called from interop when a time synchronization event is received.
            </summary>
            <param name="data">Time synchronization event data received.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.ExternalSignalReceivedCallback(Tobii.Research.ExternalSignalValueEventArgs)">
            <summary>
            Callback called from interop when the ExternalSignalReceived event is received.
            </summary>
            <param name="data">ExternalSignalReceived data.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.EventErrorOccurredCallback(Tobii.Research.EventErrorEventArgs)">
            <summary>
            Callback called from interop when the EventErrorOccurred event is received.
            </summary>
            <param name="data">Event error data.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.EyeImageReceivedCallback(Tobii.Research.EyeImageEventArgs)">
            <summary>
            Callback called from interop when the EyeImageReceived event is received.
            </summary>
            <param name="data">Event error data.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.EyeImageRawReceivedCallback(Tobii.Research.EyeImageRawEventArgs)">
            <summary>
            Callback called from interop when the EyeImageRawReceived event is received.
            </summary>
            <param name="data">Event error data.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.NotificationReceivedCallback(Tobii.Research.TobiiProInterop.InteropNotification)">
            <summary>
            Callback called from the interop when a notification is received.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.Dispose(System.Boolean)">
            <summary> Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Set to true if the method is called from the user's code.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.ThrowExceptionIfDisposed">
            <summary>
            Throws ObjectDisposedException if the eye tracker is disposing or is disposed.
            This method must be called from every method that make call to the core.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.UpdateProperty(System.String@,System.String,System.String)">
            <summary>
            Updates a property if it has been changed. Nothing is done if value and property have the same value.
            </summary>
            <param name="property">The property to change.</param>
            <param name="value">New value.</param>
            <param name="propertyName">Name of the property for property changed event.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.OnPropertyChanged(System.String)">
            <summary>
            Called by property setters to signal a property change.
            </summary>
            <param name="name">Name of the property that changed.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.UpdatePropertiesFromDevice">
            <summary>
            Rereads properties from the device.
            </summary>
        </member>
        <member name="T:Tobii.Research.EyeTracker.DataChangeObserver">
            <summary>
            Class observing changes on eye tracker data.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.DataChangeObserver.weakEyeTracker">
            <summary>
            Weak reference to the eye tracker so we don't get a circular holding of the eye tracker object.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTracker.DataChangeObserver.cancellation">
            <summary>
            Dispose this to unsubscribe from data changes.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTracker.DataChangeObserver.#ctor(Tobii.Research.EyeTracker)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.EyeTracker.DataChangeObserver" /> class.
            </summary>
            <param name="eyeTracker">Eye tracker that will get updated if data changes.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.DataChangeObserver.OnNext(Tobii.Research.TobiiProInterop.InteropEyeTrackerData)">
            <summary>
            Called when data has changed.
            </summary>
            <param name="data">New data.</param>
        </member>
        <member name="M:Tobii.Research.EyeTracker.DataChangeObserver.Unsubscribe">
            <summary>
            Unsubscribes from data changes.
            </summary>
        </member>
        <member name="T:Tobii.Research.EyeTrackingOperations">
            <summary>
            Provides static methods for searching for eye trackers as well as connecting directly to a
            specific eye tracker.The eye tracker object(s) returned can then be used to manipulate
            the eye trackers and read eye tracker data.This is the entry point for the SDK users.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTrackingOperations.numberOfLogDataSubscribers">
            <summary>
            Number of subscribers of debug log data.
            We need this to unsubscribe correctly when there are no more subscribers.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTrackingOperations.logReceivedLock">
            <summary>
            Synchronizes access when subscribing and unsubscribing to LogReceived event.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTrackingOperations.eyeTrackerInterop">
            <summary>
            Interface to interop. Do not use this directly but use EyeTrackerInterop instead.
            </summary>
        </member>
        <member name="F:Tobii.Research.EyeTrackingOperations.logCallback">
            <summary>
            We must hold a reference to the callback so the function pointer doesn't get garbage collected.
            </summary>
        </member>
        <member name="E:Tobii.Research.EyeTrackingOperations.LogReceived">
            <summary>
            Event fired when a debug log is received.
            </summary>
            <remarks>
            <CodeExample>EyeTrackingOperations_LogReceived.cs</CodeExample>
            </remarks>
        </member>
        <member name="E:Tobii.Research.EyeTrackingOperations.LogReceivedInternal">
            <summary>
            Private event used to add values to from the LogReceived event.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTrackingOperations.SdkVersion">
            <summary>
            Gets the version of the SDK.
            </summary>
        </member>
        <member name="P:Tobii.Research.EyeTrackingOperations.Interop">
            <summary>
            Gets or sets the internal interface for communicating with interop.
            </summary>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.GetEyeTracker(System.Uri)">
            <summary>
            Gets an eye tracker object that has the specified address.
            </summary>
            <param name="address">The address to the eye tracker, represented as a Uri, to use for connecting to the eye tracker.</param>
            <returns>An IEyeTracker Object if the connection to the eye tracker was successfully connected, otherwise null.</returns>
            <CodeExample>EyeTrackingOperations_GetEyeTracker_Uri.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.GetEyeTracker(System.String)">
            <summary>
            Gets an eye tracker object that has the specified address.
            </summary>
            <param name="address">The address to the eye tracker, represented as a string, to use for connecting to the eye tracker.</param>
            <exception cref="T:System.UriFormatException">If string passed is invalid.</exception>
            <returns>An IEyeTracker Object if the connection to the eye tracker was successfully connected, otherwise null.</returns>
            <CodeExample>EyeTrackingOperations_GetEyeTracker_String.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.FindAllEyeTrackers">
            <summary>
            Finds eye trackers connected to the computer or the network. Please note that
            subsequent calls to FindAllEyeTrackers() may return the eye trackers in a different order.
            </summary>
            <returns>A read-only EyeTrackerCollection with found eye trackers.</returns>
            Example of how to search for all available eye trackers and print their device names,
            models and serial numbers to the console:
            <CodeExample>EyeTrackingOperations_FindAllEyeTrackers.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.FindAllEyeTrackersAsync">
            <summary>
            Asynchronously finds eye trackers connected to the computer or the network.
            Please note that subsequent calls to FindAllEyeTrackersAsync() may return
            the eye trackers in a different order.
            </summary>
            <returns>An asynchronous operation that will provide a collection of eye trackers.
            </returns>
            <CodeExample>EyeTrackingOperations_FindAllEyeTrackersAsync.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.GetSystemTimeStamp">
            <summary>
            Retrieves the time stamp from the system clock in microseconds.
            </summary>
            <returns>The time stamp from the system clock in microseconds.</returns>
            <CodeExample>EyeTrackingOperations_GetSystemTimeStamp.cs</CodeExample>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.CreateListOfEyeTrackerDevices(System.Collections.Generic.ICollection{Tobii.Research.TobiiProInterop.InteropEyeTrackerData})">
            <summary>
            Create and return collection of eye trackers given a list of eye trackers from discovery.
            </summary>
            <param name="eyeTrackerDiscoveryResults">A list of eye trackers from discovery.</param>
            <returns>A read-only collection of eye tracker objects.</returns>
        </member>
        <member name="M:Tobii.Research.EyeTrackingOperations.LogCallback(System.Int64,Tobii.Research.LogSource,Tobii.Research.LogLevel,System.String)">
            <summary>
            Callback called from interop when new log data is received.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
            <param name="logSource">The log source.</param>
            <param name="logLevel">The log level.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="T:Tobii.Research.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.AlreadyInCalibrationModeException">
            <summary>
              Looks up a localized string similar to The eye tracker is already in calibration mode. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.ArgumentOutOfRangeException">
            <summary>
              Looks up a localized string similar to One or more parameters are invalid. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.CalibrationModeNotSupported">
            <summary>
              Looks up a localized string similar to The eye tracker does not support this calibration mode..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.ConnectionFailedException">
            <summary>
              Looks up a localized string similar to The connection to the eye tracker was lost or could not be established. Make sure the eye tracker is connected. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.DisplayAreaNotValid">
            <summary>
              Looks up a localized string similar to The display area is not valid. Please configure your eye tracker. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.EyeTrackerUnavailableException">
            <summary>
              Looks up a localized string similar to No device is available. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.FeatureNotSupportedException">
            <summary>
              Looks up a localized string similar to The feature is not supported by the eye tracker. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.FirmwareUpgradeNotSupportedException">
            <summary>
              Looks up a localized string similar to Firmware upgrade is not supported. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.IncompatibleFirmwarePackageException">
            <summary>
              Looks up a localized string similar to The firmware upgrade package provided does not match the eye tracker device. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.InsufficientLicenseException">
            <summary>
              Looks up a localized string similar to The license is insufficient. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.InternalErrorException">
            <summary>
              Looks up a localized string similar to An unspecified internal error occurred. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.InvalidOperationException">
            <summary>
              Looks up a localized string similar to Invalid operation. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.NotInCalibrationModeException">
            <summary>
              Looks up a localized string similar to The eye tracker is not in calibration mode. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.SavedLicenseFailedToApplyException">
            <summary>
              Looks up a localized string similar to The saved license on the device failed to apply. It has probably expired. API error code: {0}..
            </summary>
        </member>
        <member name="P:Tobii.Research.Properties.Resource.UnknownFirmwareVersionException">
            <summary>
              Looks up a localized string similar to The firmware version is unknown. API error code: {0}..
            </summary>
        </member>
        <member name="T:Tobii.Research.ExceptionFactory">
            <summary>
            Creates and throws appropriate eye tracker exceptions if the <code>ApiResult</code> indicates an error
            </summary>
        </member>
        <member name="M:Tobii.Research.ExceptionFactory.IfErrorCreateAndThrowException(Tobii.Research.TobiiProInterop.InteropStatus)">
            <summary>
            Creates and throws appropriate eye tracker exceptions given a result from an interop
            call to the discovery API.
            </summary>
            <param name="status">A status code from an interop call to the discovery API.</param>
        </member>
        <member name="M:Tobii.Research.ExceptionFactory.FormatErrorMessage(System.String,Tobii.Research.TobiiProInterop.InteropStatus)">
            <summary>
            Returns a formatted error message given an error message and a status code.
            </summary>
            <param name="errorMessage">The error message must contain {0} where the status code should be inserted.</param>
            <param name="status">The status code</param>
            <returns>A formatted error message with the status code contained in the message.</returns>
        </member>
        <member name="T:Tobii.Research.LicenseValidationResult">
            <summary>
            Specifies license validation result.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.Ok">
            <summary>
            The license is ok.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.Tampered">
            <summary>
            The license is tampered.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.InvalidApplicationSignature">
            <summary>
            The application signature is invalid.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.NonSignedApplication">
            <summary>
            The application has not been signed.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.Expired">
            <summary>
            The license has expired.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.Premature">
            <summary>
            The license is premature,
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.InvalidProcessName">
            <summary>
            The process name is invalid.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.InvalidSerialNumber">
            <summary>
            The serial number is invalid.
            </summary>
        </member>
        <member name="F:Tobii.Research.LicenseValidationResult.InvalidModel">
            <summary>
            The model is invalid.
            </summary>
        </member>
        <member name="T:Tobii.Research.TrackBox">
            <summary>
            Represents the eight corners in user coordinate system that together forms the track box.
            </summary>
        </member>
        <member name="M:Tobii.Research.TrackBox.#ctor(Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D,Tobii.Research.Point3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TrackBox" /> class.
            </summary>
            <param name="backLowerLeft">The back lower left corner of the track box.</param>
            <param name="backLowerRight">The back lower right corner of the track box.</param>
            <param name="backUpperLeft">The back upper left corner of the track box.</param>
            <param name="backUpperRight">The back upper right corner of the track box.</param>
            <param name="frontLowerLeft">The front lower left corner of the track box.</param>
            <param name="frontLowerRight">The front lower right corner of the track box.</param>
            <param name="frontUpperLeft">The front upper left corner of the track box.</param>
            <param name="frontUpperRight">The front upper right corner of the track box.</param>
        </member>
        <member name="M:Tobii.Research.TrackBox.#ctor(Tobii.Research.TobiiProInterop.InteropTrackBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TrackBox" /> class given a track box from the core.
            </summary>
            <param name="interopTrackBox">A track box from the core.</param>
        </member>
        <member name="P:Tobii.Research.TrackBox.BackLowerLeft">
            <summary>
            Gets the back lower left corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.BackLowerRight">
            <summary>
            Gets the back lower right corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.BackUpperLeft">
            <summary>
            Gets the back upper left corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.BackUpperRight">
            <summary>
            Gets the back upper right corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.FrontLowerLeft">
            <summary>
            Gets the front lower left corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.FrontLowerRight">
            <summary>
            Gets the front lower right corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.FrontUpperLeft">
            <summary>
            Gets the front upper left corner of the track box.
            </summary>
        </member>
        <member name="P:Tobii.Research.TrackBox.FrontUpperRight">
            <summary>
            Gets the front upper right corner of the track box.
            </summary>
        </member>
        <member name="M:Tobii.Research.TrackBox.op_Equality(Tobii.Research.TrackBox,Tobii.Research.TrackBox)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.TrackBox"/> objects are equal.
            </summary>
            <param name="obj1">First track box.</param>
            <param name="obj2">Second track box.</param>
            <returns>True if the track boxes are equal.</returns>
        </member>
        <member name="M:Tobii.Research.TrackBox.op_Inequality(Tobii.Research.TrackBox,Tobii.Research.TrackBox)">
            <summary>
            Checks if two <see cref="T:Tobii.Research.TrackBox"/> objects are not equal.
            </summary>
            <param name="obj1">First track box.</param>
            <param name="obj2">Second track box.</param>
            <returns>True if the track boxes are not equal.</returns>
        </member>
        <member name="M:Tobii.Research.TrackBox.Equals(Tobii.Research.TrackBox)">
            <summary>
            Checks if this track box is equal to another <see cref="T:Tobii.Research.TrackBox"/> .
            </summary>
            <param name="other">Other track box to check.</param>
            <returns>True if other equals this.</returns>
        </member>
        <member name="M:Tobii.Research.TrackBox.Equals(System.Object)">
            <summary>
            Checks if this track box is equal to another <see cref="T:Tobii.Research.TrackBox"/> .
            </summary>
            <param name="obj">Other track box to check.</param>
            <returns>True if obj equals this.</returns>
        </member>
        <member name="M:Tobii.Research.TrackBox.GetHashCode">
            <summary>
            Returns a hash code for this object. This is used internally in collections.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Tobii.Research.ExternalSignalValueEventArgs">
            <summary>
            Provides data for the ExternalSignalReceived event.
            </summary>
        </member>
        <member name="M:Tobii.Research.ExternalSignalValueEventArgs.#ctor(Tobii.Research.TobiiProInterop.InteropExternalSignalData)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.ExternalSignalValueEventArgs" /> class given data for all members.
            </summary>
            <param name="externalSignalData">External signal data from native code.</param>
        </member>
        <member name="P:Tobii.Research.ExternalSignalValueEventArgs.Value">
            <summary>
            Gets the value of the external signal port on the eye tracker.
            </summary>
        </member>
        <member name="P:Tobii.Research.ExternalSignalValueEventArgs.DeviceTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the eye tracker's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.ExternalSignalValueEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="P:Tobii.Research.ExternalSignalValueEventArgs.ChangeType">
            <summary>
            Gets the type of value change.
            </summary>
        </member>
        <member name="T:Tobii.Research.TrackBoxEventArgs">
            <summary>
            Provides data for the TrackBoxChanged event.
            </summary>    
        </member>
        <member name="M:Tobii.Research.TrackBoxEventArgs.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Tobii.Research.TrackBoxEventArgs" /> class given data for all members.
            </summary>
            <param name="systemTimeStamp">The time stamp according to the computer's internal clock.</param>
        </member>
        <member name="P:Tobii.Research.TrackBoxEventArgs.SystemTimeStamp">
            <summary>
            Gets the time stamp in microseconds according to the computer's internal clock.
            </summary>
        </member>
        <member name="T:Tobii.Research.Validity">
            <summary>
            Specifies the validity.
            </summary>
        </member>
        <member name="F:Tobii.Research.Validity.Invalid">
            <summary>
            Indicates valid.
            </summary>
        </member>
        <member name="F:Tobii.Research.Validity.Valid">
            <summary>
            Indicates invalid.
            </summary>
        </member>
        <member name="T:Tobii.Research.LogSource">
            <summary>
            Define the source of the debug logs.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogSource.StreamEngine">
            <summary>
            The source of the log is the stream engine.
            </summary>
        </member>
        <member name="F:Tobii.Research.LogSource.SDK">
            <summary>
            The source of the log is the SDK.
            </summary>
        </member>
        <member name="T:Tobii.Research.VersionComparison">
            <summary>
            Defines a version comparison result for firmware packages.
            </summary>
        </member>
        <member name="F:Tobii.Research.VersionComparison.Upgrade">
            <summary>
            The firmware package version is higher than the eye tracker firmware version.
            </summary>
        </member>
        <member name="F:Tobii.Research.VersionComparison.Downgrade">
            <summary>
            The firmware package version is lower than the eye tracker firmware version.
            </summary>
        </member>
        <member name="F:Tobii.Research.VersionComparison.Same">
            <summary>
            The firmware package and the eye tracker firmware have the same version.
            </summary>
        </member>
        <member name="F:Tobii.Research.VersionComparison.Invalid">
            <summary>
            Version compare isn't valid between the firmware package and the eye tracker firmware.
            </summary>
        </member>
    </members>
</doc>
